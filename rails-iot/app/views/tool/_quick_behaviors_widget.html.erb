<script type="text/javascript">
var qb; 
var outer_halo = "#e65e19";
// var inner_halo = "#e5e619";
// var outer_halo = "#CC4500";
var inner_halo = "#FFFF33";
var sun_body = "#ffffff";
var moon_body = "#195de6"; 
var moon_halo = "#0000ff"; 

var flowers = {
   0 : "#028482", //outer halo
   1 :  "#028482",
   2 : "#028482",
   3 :   "#028482"
}

var black = {
    0 : "#000000", //outer halo
    1 : "#000000",
    2 : "#000000",
    4 : "#000000",
    3 : "#000000",
    6 : "#000000",
    5 : "#000000",
    7 : "#000000",
    8 : "#000000",
    9 : "#000000",
    10 : "#000000",
    11 : "#000000", 
    12 : "#000000", 
    13 : "#000000", 
    14 : "#000000", // inner halo
    15 : "#000000",
    16 : "#000000",
    17 : "#000000",
    18 : "#000000",
    19 : "#000000",
    20 : "#000000", 
    22 : "#000000",
    21 : "#000000",
    23 : "#000000",
    24 : "#000000"
};

var sun_moon = {
    0 : outer_halo, //outer halo
    1 : outer_halo,
    2 : outer_halo,
    4 : outer_halo,
    3 : outer_halo,
    6 : outer_halo,
    5 : outer_halo,
    7 : outer_halo,
    8 : outer_halo,
    9 : outer_halo,
    10 : outer_halo,
    11 : moon_halo, 
    12 : moon_halo, 
    13 : moon_halo, 
    14 : inner_halo, // inner halo
    15 : inner_halo,
    16 : inner_halo,
    17 : inner_halo,
    18 : inner_halo,
    19 : inner_halo,
    20 : moon_body, 
    22 : moon_body,
    21 : moon_body,
    23 : sun_body,
    24 : sun_body
};

var sun = {
    0 : outer_halo, //outer halo
    1 : outer_halo,
    2 : outer_halo,
    4 : outer_halo,
    3 : outer_halo,
    6 : outer_halo,
    5 : outer_halo,
    7 : outer_halo,
    8 : outer_halo,
    9 : outer_halo,
    10 : outer_halo,
    11 : outer_halo, 
    12 : outer_halo, 
    13 : outer_halo, 
    14 : inner_halo, // inner halo
    15 : inner_halo,
    16 : inner_halo,
    17 : inner_halo,
    18 : inner_halo,
    19 : inner_halo,
    20 : sun_body, 
    22 : sun_body,
    21 : sun_body,
    23 : sun_body,
    24 : sun_body
};
var moon = {
    0 : moon_halo, //outer halo
    1 : moon_halo,
    2 : moon_halo,
    4 : moon_halo,
    3 : moon_halo,
    6 : moon_halo,
    5 : moon_halo,
    7 : moon_halo,
    8 : moon_halo,
    9 : moon_halo,
    10 : moon_halo,
    11 : moon_body, //moon halo
    12 : moon_body, 
    13 : moon_body, 
    14 : moon_body,// inner halo
    15 : moon_body,
    16 : moon_body,
    17 : moon_body,
    18 : moon_body,
    19 : moon_body,// end halo
    20 : moon_body, 
    22 : moon_body,
    21 : moon_body,
    23 : moon_body,
    24 : moon_body
};



$(function(){
  qb = new QuickBehavior();
  $('.library-block').draggable({
    cancel: "a.ui-icon", // clicking an icon won't initiate dragging
    revert: "valid", // when not dropped, the item will revert back to its initial position
    containment: 'window',
    helper: "clone",
    cursor: "move"
  });  

})

function QuickBehavior(){
  var scope = this;
  $('div.library-block.behavior').click(function(){
    var fn = $(this).data('fn');
    scope[fn]();
  });
}

QuickBehavior.prototype = {
  allBehave: function(collection, fn, params){
    if(_.isUndefined(collection)) collection = sl.getCurrent();
    var scope = this;
    var fn = fn;
    _.each(collection, function(led){
      params2 = _.clone(params);
      if(led.delay) params2.delay += led.delay;
      console.log(params2.delay);
      fn(scope, led, params2);
      if(led.delay && sc) sc.sendUpdateMsg(params2.delay);
    });
    if(sc) sc.sendUpdateMsg(params.delay); // UPDATE 
  },
  getBetween: function(a, b, weight_a, weight_b){
    var rtn = _.clone(a);
    rtn = _.mapObject(rtn, function(val, key) {
      var c_a = new paper.Color(val);
      c_a = c_a.multiply(weight_a);
      var c_b = new paper.Color(b[key]);
      c_b = c_b.multiply(weight_b);
      return c_a.add(c_b);
    });
    return rtn;
  },
  allBlack: function(collection){
    var scope = this;
    var frames = _.range(0, 5);
    _.each(frames, function(frame){
      var t = frame / (frames.length - 1);
      var t = t * t * t;
      scope.allHardCode(collection, scope.getBetween(black, sun, 1-t, t));
    });
  },
  allMoon: function(collection){
    var scope = this;
    var frames = _.range(0, 5);
    _.each(frames, function(frame){
      var t = frame / (frames.length - 1);
      var t = t * t * t;
      scope.allHardCode(collection, scope.getBetween(sun, moon, 1-t, t));
    });
  },
  allSunMoon: function(collection){
    var scope = this;
    var frames = _.range(0, 5);
    _.each(frames, function(frame){
      var t = frame / (frames.length - 1);
      var t = t * t * t;
      scope.allHardCode(collection, scope.getBetween(moon, sun_moon, 1-t, t));
    });
  },
  allSun: function(collection){
    this.allHardCode(collection, sun);
  },
  allFlower: function(collection){
    flowers[0] = new paper.Color('#2299FF');
    flowers[1] = new paper.Color('#2299FF');
    flowers[2] = new paper.Color('#2299FF');
    flowers[3] = new paper.Color('#2299FF');

    flowers[0].brightness = 0.80;
    flowers[1].brightness = 0.10;
    flowers[2].brightness = 0.10;
    flowers[3].brightness = 0.40;
 
    this.allHardCode(collection, flowers);
  },
  allHardCode: function(collection, code){
    var scope = this;
    _.each(code, function(color, lid){
    
      var color = new paper.Color(color);
      console.log(lid);
      var leds = CanvasUtil.query(paper.project, {prefix: ["NLED"], lid: parseInt(lid)});
      // CanvasUtil.query(paper.project, {prefix: ["NLED"], lid: 3})
      _.each(leds, function(led){
        scope.changeToColor(scope, led, {color: color});
      });
    });
    if(sc) sc.sendUpdateMsg(0); // UPDATE 
  },
  allBlinkFast: function(collection){
    console.log("ALL BLINK");
    var scope = this;
    var freq = 10; //hz;
    var duration = 1000;
    var step = duration / freq;
    var cycles = _.range(0, duration, step);
    console.log("CYCLES", cycles)

    _.each(cycles, function(cycle){
       scope.allBehave(collection, scope.changeToColor, {color: new paper.Color(1), delay: cycle});
       scope.allBehave(collection, scope.changeToColor, {color: new paper.Color(0), delay: cycle + (step/2.0)});
    });
  },
  allBlink: function(collection){
    console.log("ALL BLINK");
    var scope = this;
    var freq = 3; //hz;
    var duration = 1000;
    var step = duration / freq;
    var cycles = _.range(0, duration + step, step);
    console.log("CYCLES", cycles)

    _.each(cycles, function(cycle){
       scope.allBehave(collection, scope.changeToColor, {color: new paper.Color(0), delay: cycle});
       scope.allBehave(collection, scope.changeToColor, {color: new paper.Color(1), delay: cycle + (step/2.0)});
    });
  },
  allRamp: function(collection){
    var scope = this;
    var duration = 600;
    
    time_steps = _.range(0, duration + 1, 100);
    _.each(time_steps, function(timeFromNow){
      var ratio = (timeFromNow / duration);      
      scope.allBehave(collection, scope.changeToColor, {color: new paper.Color(ratio), delay: ratio});
    });
  },
  setColor: function(code){
    _.each(code, function(color, lid){
      var color = new paper.Color(color);
      var leds = CanvasUtil.query(paper.project, {prefix: ["NLED"], lid: parseInt(lid)});
      _.each(leds, function(led){
        led.baseColor = color;
      });
    });
  },
  allFade: function(collection){
    if(_.isUndefined(collection)) collection = sl.getCurrent();
    var scope = this;
    scope.setColor(flowers);
    var duration = 10000;
    
    time_steps = _.range(0, duration + 1, 100);
    //from 0 to 1

    _.each(time_steps, function(timeFromNow){
      var ratio = (timeFromNow / duration);  
      var brightness = (Math.sin(ratio * 8 * Math.PI) + 1) / 2;
      if(brightness < 0.1) brightness = 0.05;
      _.each(collection, function(led){
        console.log(led.baseColor.toString());
        var color = new paper.Color(led.baseColor);
        color.brightness = brightness * color.brightness;

        scope.allBehave([led], scope.changeToColor, {color: color, delay: ratio});
      });         
      
    });
  },
  allSlowFade: function(collection){
    if(_.isUndefined(collection)) collection = sl.getCurrent();
    var scope = this;
    scope.setColor(flowers);
    var duration = 10000;
    
    time_steps = _.range(0, duration + 1, 100);
    //from 0 to 1

    _.each(time_steps, function(timeFromNow){
      var ratio = (timeFromNow / duration);  
      var brightness = (Math.sin(ratio * 4 * Math.PI) + 1) / 2;
      if(brightness < 0.1) brightness = 0.15;
      _.each(collection, function(led){
        console.log(led.baseColor.toString());
        var color = new paper.Color(led.baseColor);
        color.brightness = brightness * color.brightness;

        scope.allBehave([led], scope.changeToColor, {color: color, delay: ratio});
      });         
      
    });
  },
  allDim: function(collection){
    var scope = this;
    this.allBehave(collection, this.dim, {delay: 0});
  },
  allOn: function(collection){
    var scope = this;
    this.allBehave(collection, this.turnOn, {delay: 0});
  },
  allOnStagger: function(collection){
    var scope = this;
    var delay = 0;
    _.each(collection, function(led){
      scope.changeToColor(scope, led, {color: new paper.Color("green"), delay: delay});
      if(sc) sc.sendUpdateMsg(delay); // UPDATE 
      delay += 100;
    });
  },
  allOff: function(collection){
    this.allBehave(collection, this.turnOff, {delay: 0});
  },
  allRainbowFlash: function(collection){
    var delay = 100;
    var scope = this;
    
    hues = _.range(0, 360, 20);
    var time = 0; 

    _.each(hues, function(hue, step){
      var color = new paper.Color('red');
      color.hue = hue;
      scope.allBehave(collection, scope.changeToColor, {color: color, delay: time});
      time += delay;
    });
  },
  allChangeColor: function(collection){
    var scope = this;
    this.allBehave(collection, this.changeToColor, {color: new paper.Color("red")});
  },
  dim: function(scope, led, params){
    params = _.extend(params, {color: new paper.Color(0.1)})
    scope.changeToColor(scope, led, params);
  },
  turnOn: function(scope, led, params){
    params = _.extend(params, {color: new paper.Color(1)})
    scope.changeToColor(scope, led, params);
  },
  turnOff: function(scope, led){
    scope.changeToColor(scope, led, {color: new paper.Color(0)});
  },
  changeToColor: function(scope, led, params){
    var scope = this;
    var diffs = CanvasUtil.getDiffusers(led);
    var color = params.color;
    var msg = ['c', led.lid, parseInt(color.red * 255), parseInt(color.green * 255), parseInt(color.blue * 255)];
    msg =  msg.join(',') + '\n';

  
    delay = _.isUndefined(params.delay) ? 0: params.delay;
    if(sc) sc.sendMessageAt(msg, delay, function(){
        _.each(diffs, function(diff){diff.fillColor = color;})
        led.fillColor = color;
        paper.view.update();
    });
  },
  focus: function(){
    paper = miniPaper;
    paper.view.zoom = 1;     
    var element = this.selectedElement();
    CanvasUtil.fitToViewWithZoom(element, paper.view.bounds.expand(0), element.position);
  }
}
</script>

<div id="behavior-library" class="widget status">
	<label class="widget-title" name="quick behaviors"></label>
	<div class="widget-body flex-container-hoz flex-wrapper">
    <div id="all-on" data-fn="allOn" class="behavior library-block"> 
      <%= image_tag "/on.png", :width => "100%" %>
      <div class="title">
        allOn
      </div> 
    </div>
    <div id="all-on" data-fn="allOnStagger" class="behavior library-block"> 
      <%= image_tag "/on.png", :width => "100%" %>
      <div class="title">
        allOnStagger
      </div> 
    </div>
    <div id="dim" data-fn="allDim" class="behavior library-block"> 
      <%= image_tag "/on.png", :width => "100%" %>
      <div class="title">
        dim
      </div> 
    </div>
    <div id="all-off" data-fn="allOff" class="behavior library-block btn btn-default"> 
      <%= image_tag "/off.png", :width => "100%" %>
      <div class="title">
        allOff
      </div> 
    </div>
    <div id="rainbow-flash" data-fn="allRainbowFlash" class="behavior library-block btn btn-default"> 
      <%= image_tag "/rainbow.png", :width => "100%" %>
      <div class="title">
        rainbow
      </div> 
    </div>
    <div id="black" data-fn="allBlack" class="behavior library-block btn btn-default"> 
      <%= image_tag "/rainbow.png", :width => "100%" %>
      <div class="title">
        black
      </div> 
    </div>
    <div id="sun" data-fn="allSun" class="behavior library-block btn btn-default"> 
      <%= image_tag "/rainbow.png", :width => "100%" %>
      <div class="title">
        sun
      </div> 
    </div>
    <div id="moon" data-fn="allMoon" class="behavior library-block btn btn-default"> 
      <%= image_tag "/rainbow.png", :width => "100%" %>
      <div class="title">
        moon
      </div> 
    </div>
    <div id="sunmoon" data-fn="allSunMoon" class="behavior library-block btn btn-default"> 
      <%= image_tag "/rainbow.png", :width => "100%" %>
      <div class="title">
        sunmoon
      </div> 
    </div>
    <div id="ramp" data-fn="allRamp" class="behavior library-block btn btn-default"> 
      <%= image_tag "/ramp.png", :width => "100%" %>
      <div class="title">
        ramp
      </div> 
    </div>
     <div id="ramp" data-fn="allFade" class="behavior library-block btn btn-default"> 
      <%= image_tag "/ramp.png", :width => "100%" %>
      <div class="title">
        fade
      </div> 
    </div>
        <div id="ramp" data-fn="allSlowFade" class="behavior library-block btn btn-default"> 
      <%= image_tag "/ramp.png", :width => "100%" %>
      <div class="title">
        slow-fade
      </div> 
    </div>
    <div id="red" data-fn="allChangeColor" class="behavior library-block btn btn-default"> 
      <%= image_tag "/red.png", :width => "100%" %>
      <div class="title">
        red
      </div> 
    </div>
    <div id="all-blink" data-fn="allBlink" class="behavior library-block btn btn-default"> 
      <%= image_tag "/flash.png", :width => "100%" %>
      <div class="title">
        blink
      </div> 
    </div>
    <div id="all-blink" data-fn="allBlinkFast" class="behavior library-block btn btn-default"> 
      <%= image_tag "/flash.png", :width => "100%" %>
      <div class="title">
        blink-fast
      </div> 
    </div>
     <div id="all-blink" data-fn="allFlower" class="behavior library-block btn btn-default"> 
      <%= image_tag "/flash.png", :width => "100%" %>
      <div class="title">
        flowers
      </div> 
    </div>

	</div>
</div>
<style type="text/css">
.flex-wrapper{
  flex-wrap: wrap !important;
}
#myMotionCanvas{
    border: 2px solid #666;
}
.library-block{
  width: 60px; 
  height: 70px;
  border-radius: 0px;
  z-index: 10000000;
}
.library-block:hover{
   border-radius: 0px;
}
.library-block img{
  height: 50px;
  padding: 3px;
}
.library-block div.title{
  height: 20px;
  text-align: center;
}


</style>
