   <script type="text/javascript">
      var ip, ws, generator, gui;
      function Generator(){
        this.length = 85;
        this.lg = new LensGenerator();
        this.ws = new WebStorage();
        this.diffuser = "Hemisphere";
        this.model = "Reflector";
        this.export = "MOLD";
        this.init();
        this.c_norm = 0.5;
        this.c_uni = 0.5;
        this.cost = 0.5;
        this.random = true;
        this.generate();
        // this.fabricate();
        this.sample_size = 150;
      }
      Generator.prototype = {
        init: function(){
          this.box = new paper.Path.Rectangle(paper.view.bounds);
          this.box.set({
              position: paper.view.center,
              fillColor: '#111'
          }); 
          
          paper.view.update();
        }, 
        clear: function(prefixes){
          _.each(prefixes, function(prefix){
            _.each(CanvasUtil.queryPrefix(prefix), function(rt){
              rt.remove();
            });
          }) 
        },
        generate: function(){
            this.clear(["RT", "RAY", "PL", "LS", "DRAY"]);
            var model = eval(this.model);
            if(this.random || this.model == "noLens"){
                params = model.random(this.length);
            } else{
              params = this.getOptimal();
              console.log("STORED COST", params.cost);
            }
            paper.view.zoom = 2
            var scene = model.makeScene(this.box, params, this.diffuser);

            // this.fire();
            paper.view.update();
            return params;
        }, 
        resample: function(){
         var scope = this;
         var samples = _.range(0, this.sample_size, 1);

          samples = _.map(samples, function(s, i){
            var params = scope.generate(random=true);
            uniformity = scope.fire();
            return {cost: uniformity, params: JSON.stringify(params)}
          });
         
          var min = _.min(samples, function(s){ return s.cost; });
          var max = _.max(samples, function(s){ return s.cost; });
          // console.log("RESULTS:", min, max);

          max_p = JSON.parse(max.params);
          max_p.cost = max.cost;
          max.params = JSON.stringify(max_p);
          
          var key = scope.generateKey(scope.length);
          if(this.ws.includes(key)){
            params = JSON.parse(this.ws.get(key));
            console.log("PREVIOUSLY STORED", scope.length, params.cost, "v", max.cost);
            if(!_.isUndefined(params.cost) && params.cost > max.cost){
              this.generate();
              return params.cost;
            }
          }
          console.log("REWRITING", scope.length, max.params);
          this.ws.set(key, max.params);
          
          // LOAD UP THE BEST ONE
          this.generate(false);
          return max.cost;
        },
        fire: function(){
           this.clear(["RAY", "PL", "DRAY"]);
           var mediums = CanvasUtil.getMediums();
           var light_source = CanvasUtil.queryPrefix("LS");
           
            light_source = _.chain(light_source).map(function(ls){
                  return new PointLight({
                      position: ls.position, 
                      mediums: mediums
                  });
            }).each(function(ls){
              ls.emmision(-60, 0, 1);
            });

         
           this.c_uni =  ImagePlane.calculateUniformity();
           this.c_norm = ImagePlane.calculateNormality();
           // console.log("RESULTS:", uniformity.toFixed(2), normality.toFixed(2), (uniformity * 0.8 + normality * 0.2).toFixed(2));

           paper.view.update();
           this.cost = this.c_uni * 0.8 + this.c_norm * 0.2;

           console.log("COST", this.cost);

           return this.cost;
           // return  normality * 0.2 ;
        }, 
        batch_clear: function(){
          var scope = this;
          _.each(scope.ws.keys(), function(key){
            var k = scope.decodeKey(key);

            if(!_.isNull(k))
              scope.ws.remove(key);
            
          });
        }, 
        batch_process: function(){
          var scope = this;
          lengths = _.range(35, 600, 5);
          _.each(lengths, function(l){
            scope.length = l;
            console.log("PROCESSING", l);
            scope.resample();

          });
        }, 
        fabricate: function(){
          var params = this.generate();
          var model = eval(this.model);
          model.fabricate(params, this.length);
          paper.view.update();
        }, 
        download: function(){
          paper.view.zoom = 1;
          var result = CanvasUtil.queryPrefix(this.export);
          if(result.length == 0) return;
          result = result[0];
          result.bringToFront();
          result.fitBounds(paper.view.bounds.expand(-100));

          result.position =  paper.project.view.projectToView(new paper.Point(result.strokeBounds.width/2.0, result.strokeBounds.height/2.0));
          cut =  paper.project.view.projectToView(new paper.Point(result.strokeBounds.width, result.strokeBounds.height));
          // result.position.x -= 6;
          paper.view.update();
          bufferCanvas = copyCanvasRegionToBuffer($('#myCanvas')[0], 0, 0, cut.x, cut.y );
          
          var download = document.createElement('a');
          download.href = bufferCanvas.toDataURL("image/png");
          download.download = this.export + '.png';
          download.click();

            //     dom.attr('href', bufferCanvas.toDataURL("image/png"))
            //             .attr('download', filename + '.png');
            //     // dom.attr('href', $('#myCanvas')[0].toDataURL("image/png"))
            //            // .attr('download', filename + '.png');
            // }
        }, 
        generateKey: function(){
          return [this.model, this.diffuser, this.length].join("_"); 
        },
        decodeKey: function(k){
          if(k.split("_").length <= 1) return null;
          else{
            d = k.split("_");
            return {model: d[0], diffuser: d[1], length: parseFloat(d[2])}
          }
        }, 
        getSamples: function(){
          var scope = this;
          return  _.chain(this.ws.keys())
                      .map(function(k){
                        return scope.decodeKey(k);
                      })
                      .filter(function(k){
                        if(_.isNull(k)) return null;
                        return scope.model == k.model && scope.diffuser == k.diffuser;
                      })
                      .compact()
                      .value();
        },
        getOptimal: function(){
          var scope = this;
          var model = eval(this.model);
          var key = this.generateKey();    
          if(this.ws.includes(key)){
              return JSON.parse(this.ws.get(key));
          }
          else{
              keys = _.chain(scope.getSamples())
                      .pluck("length")
                      .sortBy()
                      .value();

              if(keys.length == 0) return model.random(l);
              b = _.min(keys, function(k){ if(k - l < 0) return 10000000; else return k - l; });
              a = _.min(keys, function(k){ if(l - k < 0) return 10000000; else return l - k; });
              tau = (b-l)/(b-a);

              // console.log("KEYS", a, b, tau);

              a = JSON.parse(this.ws.get([this.model, this.diffuser, a].join("_")));
              b = JSON.parse(this.ws.get([this.model, this.diffuser, b].join("_")));
            
              return model.interpolateParams(a, b, tau);
          }  
        }
      }
      

      $(function(){
        // ws = new WebStorage();
        Utility.paperSetup($('#myCanvas'));

        paper.loadCustomLibraries();
        gui = new dat.GUI();
    
        generator = new Generator();
        var f0 = gui.addFolder('Model');
        f0.add(generator, "diffuser").options(["Planar", "Hemisphere", "Cuboid"]);
        f0.add(generator, "model").options(["noLens", "Reflector", "TIR", "Splitter"]);
        f0.add(generator, "length").min(15).max(300).step(5).listen();
        f0.add(generator, "random");
        f0.add(generator, "generate");
        
        var f1 = gui.addFolder('Ray Tracing');
        f1.add(generator, "c_uni").min(0).max(1).listen();
        f1.add(generator, "c_norm").min(0).max(1).listen();
        f1.add(generator, "cost").min(0).max(1).listen();
        f1.add(generator, "fire");
        
        

        var f2 = gui.addFolder('Sampling')
        f2.add(generator, "sample_size").min(0).max(300).step(10);
        f2.add(generator, "resample");
        f2.add(generator, "batch_process");
        f2.add(generator, "batch_clear");
        
        var f3 = gui.addFolder('Fabrication')
        f3.add(generator, "fabricate");
        f3.add(generator, "export").options(["MOLD", "REFL", "CONE"]);
        f3.add(generator, "download");
        
        f1.open();
        f2.open();
        f3.open();
        f0.open();
        // zb = new ZoomBar($("#zoom-bar"), 5.0, paper);
        $("#shade").fadeOut();

      });

    </script>
  </head>
  <body>
   
    <canvas id="myCanvas"></canvas>
    <%= render :partial => "zoom_bar"%>
  </body>

  <style>
  
   #zoom-bar{
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      padding: 4px 8px;
      color: #AAA;
      position: absolute;
      z-index: 1000;
      top: 230px;
      left: 10px;
       z-index: -1;
   }
    body, html{
      width: 100%;
      height: 100%;
      overflow: hidden;
      background: #f5f4f0;
    }
    #myCanvas {
      position: absolute;
      top: 0px;
      left: 0;
      width: 100%;
      height: calc(100% - 0px);
      border: solid 1px black;
      background: black;
      /*display: none;*/
      z-index: -100;
      cursor: pointer;
    }

   
  </style>
