:javascript
  const ports = #{@ports.to_json.html_safe};
  var act, sc;
  $(function(){
      tsp = initTimeSignals($('datasignal canvas'));
      act = initActuators($('#actuators canvas'));
      activeInteractivity();
      $("event#actuators input.master").on('input', function(){
        var v = $(this).val();
        var actuators = $('actuator');
        _.each(actuators, function(a, i){
          if(! $(a).hasClass("selected")) return;
          var param = $(a).find('params input:checked').val();
          var actuator = act[i];
          paper = actuator.op.paper;
          query = {parametrized: true}
          query[param] = parseFloat(v);
          actuator.value = query;
        });
      })
      $('#shade').fadeOut(0);
  });

  function activeInteractivity(){
    var editor = activateEditors();
    $('actuator').click(function(){
      $('actuator').removeClass('selected');
      $(this).addClass('selected');
    });
    $('datasignal').click(function(){
      $('datasignal').removeClass('selected');
      $(this).addClass('selected');
    });
    $('button.sexy').click(function(){
      var id = $('datasignal.selected').data('time-signal-id');
      var ts = tsp[id];
      var commands = ts.command_list(3000);
      editor.insert("function myBehavior(){\n")
      _.each(commands, function(command){
          var actuators = $('actuator');
          _.each(actuators, function(a, i){
            if(! $(a).hasClass("selected")) return;
            var param = $(a).find('params input:checked').val();
            var actuator = act[i];
            paper = actuator.op.paper;

            query = {parametrized: true}
            query[param] = parseFloat(command.param);
            
            actuator.value = query;
            var value = actuator.value;
             editor.insert(actuator.toCommand());
             editor.insert("\tdelay("+ command.duration.toFixed(0) +");\n");
          });

      }); 
      editor.insert("}\n");

      _.each(commands, function(command){
        setTimeout(function(){
          console.log("FIRED", command.value);
          var actuators = $('actuator');
          _.each(actuators, function(a, i){
            if(! $(a).hasClass("selected")) return;
            var param = $(a).find('params input:checked').val();
            var actuator = act[i];
            paper = actuator.op.paper;
            query = {parametrized: true}
            query[param] = parseFloat(command.param);
            actuator.value = query;
          });
        }, command.t);
      }); 
      
    });

    connectToSocket();
    
  }
  function connectToSocket(){
    sc = new SocketControl({
      ports: ports,
      trigger: $('#socket-button'), 
      selector: $('#port-selector'),
      noports_func: function(dom){
        console.log("NO PORTS");
        dom.removeClass('btn-default btn-success').addClass('btn-danger').find('span').removeClass('glyphicon-send glyphicon-ok').addClass('glyphicon-remove');
        $('#port-selector').prop('disabled', 'disabled');
        $('#port-status').html("RECONNECT DEVICE?");
      },
      connect_func: function(dom){
        port = $('#port-selector').val();
        dom.removeClass('btn-danger btn-success').addClass('btn-default').find('span').removeClass('glyphicon-send glyphicon-remove').addClass('glyphicon-remove');
        $('#port-selector').prop('disabled', 'disabled');
        $('#port-status').html(port);
      }, 
      error_func: function(dom){
        dom.removeClass('btn-default btn-success').addClass('btn-danger').find('span').removeClass('glyphicon-send glyphicon-ok').addClass('glyphicon-remove');
        $('#port-status').html("-");
      },
      disconnect_func: function(dom){
        dom.removeClass('btn-danger btn-default').addClass('btn-success').find('span').removeClass('glyphicon-ok glyphicon-remove').addClass('glyphicon-send');
        $('#port-selector').prop('disabled', false);
        $('#port-status').html("–");
      }
    });
  }
  function activateEditors(){
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/monokai");
    // var JavaScriptMode = ace.require("ace/mode/javascript").Mode;
    // editor.session.setMode(new JavaScriptMode());
    editor.getSession().setMode("ace/mode/javascript");
    editor.$blockScrolling = Infinity;
    return editor;
  }
  function activePaper(){
    paper.project.clear();
  }

#ui2
  %group.vert
    %event#data-signals.full-hoz.data-signal-design
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          DATA SIGNAL
        %button.btn.btn-xs.btn-success.sexy
          %span.glyphicon.glyphicon-send
          SEND
      %datasignal.vert-centered
        %canvas{:data => "[0, 1, 0]"}
      %datasignal.vert-centered
        %canvas{:data => "[0, 0.1, 0.2, 0.3, 0.4, 1]"}
      %datasignal.vert-centered
        %canvas{:data => "[1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0]"}
      %datasignal.vert-centered
        %canvas{:data => "[0, 1, 0, 1, 0, 1, 0.5]"}
    
    %event#actuators.full-hoz.actuator-design
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          ACTUATOR
        %input.master.sexy{:type=>"range", :min => 0, :max => 1, :step => 0.01}
      %actuator.hoz
        %div.info.vert.fill_height{:style => "width: 100px"}
          %p.actuator-title RGBLED
          %canvas{:type=>"RGBLED"}
        %params.actuator.scroll-list
          %span.full-hoz
            %input{:type => "radio", :name => "parameter", :value => "red", :checked => true}
            %label.actuator RED
          %span.full-hoz
            %input{:type => "radio", :name => "parameter", :value => "green"}
            %label.actuator GREEN
          %span.full-hoz
            %input{:type => "radio", :name => "parameter", :value => "blue"}
            %label.actuator BLUE
      %actuator.hoz
        %div.info.vert.fill_height{:style => "width: 100px"}
          %p.actuator-title HSBLED
          %canvas{:type=>"HSBLED"}
        %params.actuator.scroll-list
          %span.full-hoz
            %input{:type => "radio", :name => "hsbparameter", :value => "brightness"}
            %label.actuator BRIGHTNESS
          %span.full-hoz
            %input{:type => "radio", :name => "hsbparameter", :value => "saturation", :checked => true}
            %label.actuator SATURATION
          %span.full-hoz
            %input{:type => "radio", :name => "hsbparameter", :value => "hue"}
            %label.actuator HUE
      %actuator.selected.hoz
        %div.info.vert.fill_height{:style => "width: 100px"}
          %p.actuator-title LED
          %canvas{:type=>"LED"}
        %params.actuator.scroll-list
          %span.full-hoz
            %input{:type => "radio", :name => "ledparameter", :value => "brightness", :checked => true}
            %label.actuator BRIGHTNESS
      %actuator.hoz
        %div.info.vert.fill_height{:style => "width: 100px"}
          %p.actuator-title STEPPER
          %canvas{:type=>"Stepper"}
        %params.actuator.scroll-list
          %span.full-hoz
            %input{:type => "radio", :name => "motorparameter", :value => "angle", :checked => true}
            %label.actuator ANGLE
      %actuator.hoz
        %div.info.vert.fill_height{:style => "width: 100px"}
          %p.actuator-title HEATER
          %canvas{:type=>"Heater"}
        %params.actuator.scroll-list
          %span.full-hoz
            %input{:type => "radio", :name => "heaterparameter", :value => "voltage", :checked => true}
            %label.actuator VOLTAGE
    %event#simsignal.full-hoz.actuator-design
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          SIM. SIGNAL
        %button.btn.btn-xs.btn-danger.sexy
          %span.glyphicon.glyphicon-refresh
          UPDATE
      %datasignal.vert-centered
        %canvas{:data => "[0, 1, 0]"}
      %datasignal.vert-centered
        %canvas{:data => "[0, 0.1, 0.2, 0.3, 0.4, 1]"}
      %datasignal.vert-centered
        %canvas{:data => "[1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0]"}
      %datasignal.vert-centered
        %canvas{:data => "[0, 1, 0, 1, 0, 1, 0.5]"}
    %event#commands.full-hoz.tall
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          COMMANDS
        %button.btn.btn-xs.btn-danger.sexy
          %span.glyphicon.glyphicon-refresh
          UPDATE
      %commandlist.vert-centered
        .full-hoz
          #port-select.widget.status
            %label.widget-title.label-normal{:name => "Port Select"}
            .widget-body.hoz
              %div.hoz-left{:style => "width: 50%;"}
                %span#port-info
                  CONNECTED TO:
                  %span#port-status –
              %div{:style => "width: 50%;"}
                %select#port-selector.sm.col-xs-10
                .socket-btns.btn-group.col-xs-2.nopadding
                  %button#socket-button.btn.btn-xs.btn-success.btn-block
                    = glyph "log-in"
              %br.clearfix/
        #editor.editor
        .full-hoz
          .btn-group.full-hoz-centered
            %button.btn.btn-xs.btn-primary.sexy
              %span.glyphicon.glyphicon-trash
              TRASH
            %button.btn.btn-xs.btn-danger.sexy
              %span.glyphicon.glyphicon-stop
              STOP
            %button.btn.btn-xs.btn-danger.sexy
              %span.glyphicon.glyphicon-pause
              PAUSE
            %button.btn.btn-xs.btn-success.sexy{style:"width: 20%;"}
              %span.glyphicon.glyphicon-play
              PLAY
            
         
            
      
          
        
       
           
:css
  #editor{
    height: 100%;
    border-radius: 5px;
    padding: 5px;
    width: 99%;
    margin-top: 5px;
  }
  input.sexy{
    width: 90%;
    margin-top: 10px !important;
  }
  button.sexy{
    /*width: 30%;*/
    margin-top: 10px !important;
    margin-bottom: 5px !important;
  }
  .ui{
  	height: 100%;
  }
  .blue{
    background: blue;
  }
  .fill_height{
    height: 100%;
  }
  .fill_width{
    width: 100% !important;
  }
  /* PORT */
  #port-info{
    color: #00A8E1;
    /*font-weight: bold;*/
    font-size: 8pt;
  }
  #port-status{
    color: white;
    font-style: italic;
    font-weight: normal;
    font-size: 8pt;
  }


 
