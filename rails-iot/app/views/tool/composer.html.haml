:javascript
  const ports = #{@ports.to_json.html_safe};
  var act, sc;
  $(function(){
      cmp = new Composer({
        actuators: $('#actuators'), 
        slider: $("event#actuators input.master"), 
        timesignals: $('datasignal canvas')
      });
      $('#shade').fadeOut(0);
  });

  function activeInteractivity(){
    editor = activateEditors();
    
    $('button.sexy').click(function(){
      newSession = ace.createEditSession("","ace/mode/javascript")
      editor.setSession(newSession);
      var id = $('datasignal.selected').data('time-signal-id');
      var ts = tsp[id];
      var commands = ts.command_list(3000);
      editor.insert("function myBehavior(){\n")
      _.each(commands, function(command){
          var actuators = $('actuator');
          _.each(actuators, function(a, i){
            if(! $(a).hasClass("selected")) return;
            var param = $(a).find('params input:checked').val();
            var actuator = act[i];
            paper = actuator.op.paper;

            query = {parametrized: true}
            query[param] = parseFloat(command.param);
            
            actuator.value = query;
            var value = actuator.value;
             editor.insert(actuator.toCommand());
             editor.insert("\tdelay("+ command.duration.toFixed(0) +");\n");
          });

      }); 
      editor.insert("}\n");

      _.each(commands, function(command){
        setTimeout(function(){
          var actuators = $('actuator');
          _.each(actuators, function(a, i){
            if(! $(a).hasClass("selected")) return;
            var param = $(a).find('params input:checked').val();
            var actuator = act[i];
            paper = actuator.op.paper;
            query = {parametrized: true}
            query[param] = parseFloat(command.param);
            actuator.value = query;
          });
        }, command.t);
      }); 
      
    });

    connectToSocket();
    
  }
  
  function activateEditors(){
    
  }
  function activePaper(){
    paper.project.clear();
  }

#ui2
  %group.vert
    %event#data-signals.full-hoz.data-signal-design
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          DATA SIGNAL
        %button.btn.btn-xs.btn-success.sexy
          %span.glyphicon.glyphicon-send
          SEND
      %datasignal.vert-centered
        %canvas{:data => "[0, 1, 0]"}
      %datasignal.vert-centered
        %canvas{:data => "[0, 0.1, 0.2, 0.3, 0.4, 1]"}
      %datasignal.vert-centered
        %canvas{:data => "[1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0]"}
      %datasignal.vert-centered
        %canvas{:data => "[0, 1, 0, 1, 0, 1, 0.5]"}
    = render :partial => "actuators"
    %event#simsignal.full-hoz.actuator-design
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          SIM. SIGNAL
        %button.btn.btn-xs.btn-danger.sexy
          %span.glyphicon.glyphicon-refresh
          UPDATE
      %datasignal.vert-centered
        %canvas{:data => "[0, 1, 0]"}
      %datasignal.vert-centered
        %canvas{:data => "[0, 0.1, 0.2, 0.3, 0.4, 1]"}
      %datasignal.vert-centered
        %canvas{:data => "[1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0]"}
      %datasignal.vert-centered
        %canvas{:data => "[0, 1, 0, 1, 0, 1, 0.5]"}
    
    %event#commands.full-hoz.tall
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          COMMANDS
        %button.btn.btn-xs.btn-danger.sexy
          %span.glyphicon.glyphicon-refresh
          UPDATE
      %commandlist.vert-centered
        .full-hoz
          #port-select.widget.status
            .widget-body.hoz
              %div.hoz-left{:style => "width: 50%;"}
                %span#port-info
                  CONNECTED TO:
                  %span#port-status â€“
              %div{:style => "width: 50%;"}
                %select#port-selector.sm.col-xs-10
                .socket-btns.btn-group.col-xs-2.nopadding
                  %button#socket-button.btn.btn-xs.btn-success.btn-block
                    = glyph "log-in"
              %br.clearfix/
        #editor.editor
        .full-hoz
          .btn-group.full-hoz-centered
            %button.btn.btn-xs.btn-primary.sexy
              %span.glyphicon.glyphicon-trash
              TRASH
            %button.btn.btn-xs.btn-danger.sexy
              %span.glyphicon.glyphicon-stop
              STOP
            %button.btn.btn-xs.btn-danger.sexy
              %span.glyphicon.glyphicon-pause
              PAUSE
            %button.btn.btn-xs.btn-success.sexy{style:"width: 20%;"}
              %span.glyphicon.glyphicon-play
              PLAY
    %event#composer.full-hoz
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          COMPOSER
        %button.btn.btn-xs.btn-danger.sexy
          %span.glyphicon.glyphicon-refresh
          UPDATE
    %event#behaviors.full-hoz
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          BEHAVIORS
        %button.btn.btn-xs.btn-danger.sexy
          %span.glyphicon.glyphicon-refresh
          UPDATE
    %event#distributed.full-hoz
      .vert
        %button.design-title.btn-primary.trigger{:type => "trigger"}
          DISTRIBUTED
        %button.btn.btn-xs.btn-danger.sexy
          %span.glyphicon.glyphicon-refresh
          UPDATE
    
      
          
        
       
           
:css
  #ui2{
    height: 100%;
    overflow-y: scroll;
  }
  #editor{
    height: 100%;
    border-radius: 5px;
    padding: 5px;
    width: 99%;
    margin-top: 5px;
  }
  
  button.sexy{
    /*width: 30%;*/
    margin-top: 10px !important;
    margin-bottom: 5px !important;
  }
  .ui{
  	height: 100%;
  }
  .blue{
    background: blue;
  }
  /* PORT */
  #port-info{
    color: #00A8E1;
    /*font-weight: bold;*/
    font-size: 8pt;
  }
  #port-status{
    color: white;
    font-style: italic;
    font-weight: normal;
    font-size: 8pt;
  }


 
