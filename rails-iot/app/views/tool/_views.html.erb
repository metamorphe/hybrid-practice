<!-- Views -->
<script type="text/javascript">
  function ViewManager(container){
    this.container = container;
    this.state = true;
    this.init();
    this.view = "GLOBAL";
  }

  ViewManager.prototype = {
     init: function(){
      this.hide(true);
      var scope = this;
      console.log(this);
      this.update();
      $('#view-icon').click(function(){
        if(scope.state) scope.hide();
        else scope.show();
      });
      $('#view-list ul li').click(function(){
        $('#view-icon').html($(this).children('button').html());
        $('#view-list ul li').removeClass('active');
        $(this).addClass('active');
        $('#view-icon').attr('class', $(this).children('button').attr('class')).removeClass('view').removeClass("btn-sm").addClass('pull-right');
        scope.view = $(this).children('span').html();
        scope.update();
      });
      $('button[name="circuit"]').click();

      // Create labels and hide them immediately after
      $.each(displays, function(idx, obj) {
        ViewManager.generateLabels(obj.allLeds, 'lid', 'CIR');
        ViewManager.generateLabels(obj.allLeds, 'status', 'STA', false);
      });
      this.update();
    },
    getCurrentView: function(){
      return this.view;
    },
    update: function(){
      var view = this.getCurrentView();
      _.each(displays, function(display){

        var BO = display.queryPrefix("BO");
        var BI = display.queryPrefix("BI");
        var DIF = display.queryPrefix("DIF");
        var CP = display.queryPrefix("CP");
        var NLED = display.queryPrefix("NLED");

        // Because we create
        var CIR = CanvasUtil.queryPrefix("CIR");
        var STA = CanvasUtil.queryPrefix("STA");

        _.each(NLED, function(LED){
          LED.style.strokeWidth = 1;
          LED.style.strokeColor = "#666";
        });
        // LOGIC FOR VIEW SHIFT

        switch(view){
          case "GLOBAL":
            ViewManager.setElementVisibility(BO, true);
            ViewManager.setElementVisibility(BI, true);
            ViewManager.setElementVisibility(DIF, true);
            ViewManager.setElementVisibility(CP, true);
            ViewManager.setElementVisibility(NLED, true);
            ViewManager.setElementVisibility(CIR, false);
            ViewManager.setElementVisibility(STA, false);
            break;
          case "INTERACTIVITY":
              ViewManager.setElementVisibility(BO, false);
              ViewManager.setElementVisibility(BI, false);
              ViewManager.setElementVisibility(DIF, true);
              ViewManager.setElementVisibility(CP, false);
              ViewManager.setElementVisibility(NLED, false);
              ViewManager.setElementVisibility(CIR, false);
              ViewManager.setElementVisibility(STA, true);
            break;
          case "SPACER":
            break;
          case "DIFFUSER":
            ViewManager.setElementVisibility(BO, false);
            ViewManager.setElementVisibility(BI, false);
            ViewManager.setElementVisibility(DIF, true);
            ViewManager.setElementVisibility(CP, false);
            ViewManager.setElementVisibility(NLED, false);
            ViewManager.setElementVisibility(CIR, false);
            ViewManager.setElementVisibility(STA, false);
            break;
          case "LIGHTS":
            ViewManager.setElementVisibility(BO, false);
            ViewManager.setElementVisibility(BI, false);
            ViewManager.setElementVisibility(DIF, false);
            ViewManager.setElementVisibility(CP, false);
            ViewManager.setElementVisibility(NLED, true);
            ViewManager.setElementVisibility(CIR, false);
            ViewManager.setElementVisibility(STA, false);
            break;
          case "CIRCUIT":
            circuitMakerScript(display);
            ViewManager.setElementVisibility(BO, true);
            ViewManager.setElementVisibility(BI, true);
            ViewManager.setElementVisibility(DIF, false);
            ViewManager.setElementVisibility(CP, true);
            ViewManager.setElementVisibility(NLED, true);
            ViewManager.setElementVisibility(CIR, true);
            ViewManager.setElementVisibility(STA, false);
            break;
          default:
            break;
        }
      });
      paper.view.update();
    },
    show: function(now){
      if(this.state) return;
      this.state = true;
      if(now){$("#view-list").show(); return;}
      $("#view-list").toggle("slide", { direction: "up" }, 300);
    },
    hide: function(now){
      if(!this.state) return;
      this.state = false;
      if(now){$("#view-list").hide(); return;}
      $("#view-list").toggle("slide", { direction: "up" }, 300);
    }
  }

  ViewManager.setElementVisibility = function(arr, isVisible){
    _.each(arr, function(el){
      el.opacity = isVisible ? 1: 0;
    });
  }

  /**
   * Generates labels for a list of Paper.js objects named
   * COMPONENTS, and displays them on the canvas. Objects created
   * have a .name property of PREFIX + ":circle" and PREFIX + ":text",
   * and the text generated for each label is obtained from the
   * .ID_NAME property of each object in COMPONENTS.
   *
   * Note that the ID_NAME must match the property name for each
   * object exactly, otherwise behavior is undefined.
   */
  ViewManager.generateLabels = function(components, idName, prefix, useOffset=true) {
    var circle, text, x, y, point;
		var radius = 10;
		var offset = useOffset ? 15 : 0;
		$.each(components, function(idx, obj) {
			x = obj.position.x;
			y = obj.position.y;
			circle = new Path.Circle(new Point(x + offset, y + offset)
									, radius);
			circle.name = prefix + ':circle_' + obj[idName];
			circle.set({
				strokeWidth: 1,
				strokeColor: '#292824',
				fillColor: 'white',
				opacity: 1.0,
			});
			text = new PointText(new Point(x + offset,
					y + offset));
			text.name = prefix + ':text_' + obj[idName];
			text.set({
				fillColor: '#292824',
				content: '' + obj[idName]
			});
			text.position.x -= text.bounds.width / 2;
			text.position.y += text.bounds.height / 4;
		});
  }

  function circuitMakerScript(display){
    // GENERATE BASE
    var CP = display.queryPrefix("CP")[0];
    var base = CP.clone();
    base.set({
      name: "BASE: FR1 Board",
      strokeColor: "#fe6e4b",
      strokeWidth: Ruler.mm2pts(6)
    });
    base.sendToBack();

    // CIRCUIT BACKGROUND
    // expandPath(CP, 20);
    // for(var i = 0; i < CP.segments.length; i += 1){
    //   if(i + 1 >= CP.segments.length) break;
    //   var seg0 = CP.segments[i];
    //   var seg1 = CP.segments[i+1];

    //   var offset0 = CP.getOffsetOf(seg0.point)_;
    //   var x0 = CP.getPointAt(offset0);
    //   var n0 = CP.getNormalAt(offset0);
    //   n0.length = 10;


    //   var offset1 = CP.getOffsetOf(seg1.point);
    //   var x1 = CP.getPointAt(offset1);
    //   var n1 = CP.getNormalAt(offset1);
    //   n1.length = 10;

    //   var line = new paper.Path({
    //       segments: [x0.add(n0), x1.add(n1) ],
    //       strokeColor: 'red'
    //   });
    //   console.log(offset0, offset1)
    // }
    // expandPath(CP, 20);

    // // GENERATE CONTROL LINES
    // var PWR = new paper.Path({
    //   name: "CL: PWR",
    //   strokeColor: "#FF0000",
    //   strokeWidth: Ruler.mm2pts(0.648)
    // });
    // var GND = new paper.Path({
    //   name: "CL: GND",
    //   strokeColor: "#000000",
    //   strokeWidth: Ruler.mm2pts(0.648)
    // });

   //  var expandedPath = new paper.Path.Circle({
   //      fillColor: "green",
   //      radius: 10,
   //      position: CP.getPointAt(0)
   //    });
   //  expandedPath.bringToFront();
   // var c = new paper.Path.Circle({
   //    fillColor: "grey",
   //    radius: 10,
   //    position: CP.getPointAt(10)
   //  });
   //  var prev = expandedPath;
   //  expandedPath = expandedPath.unite(c);
   //  c.remove();
   //  // prev.remove();
   //  expandedPath.remove();
    // for(var offset = 0; offset < CP.length; offset += 90){
    // for(var i = 0; i < CP.segments.length; i += 1){
      // console.log(CP.segments)
      // var seg = CP.segments[i];
      // console.log(seg);
      // c = new paper.Path.Circle({
      //   fillColor: "purple",
      //   radius: 10,
      //   position: seg.point
      // })

      // offset = CP.getOffsetOf(seg.point);
      // var nPWR = CP.getNormalAt(offset);
      // var xPWR = CP.getPointAt(offset);

      // nPWR.length = 10;
      // c = new paper.Path.Circle({
      //   fillColor: "purple",
      //   radius: 10,
      //   position: xPWR
      // });
      // prev = expandedPath;
      // expandedPath = expandedPath.unite(c);
      // prev.remove();
      // c.remove();
      // var nGND = nPWR.clone();
      // nGND.length = 10;

      // var xGND = CP.getPointAt(offset);
      // // var pos = n.subtract(x);
      // // c = new paper.Path.Circle({
      // //   fillColor: "purple",
      // //   radius: 3,
      // //   position: n.add(x)
      // // })
      // var line = new paper.Path({
      //     segments: [xPWR, xPWR.add(nPWR)],
      //     strokeColor: 'red'
      // });
      // PWR.addSegment(xPWR.add(nPWR))
      // GND.addSegment(xGND.subtract(nGND))
    // }
    // CP.name = "PWR: PowerLine"

  }

  function expandPath(path, amount){
    var circles = [];
    for(var offset = 0; offset < path.length; offset += 12){
      var x = path.getPointAt(offset);
      var pos = x.clone();
      pos.x -= amount/2;
      pos.y -= amount/2;
      var n = path.getTangentAt(offset);
      c = new paper.Path.Rectangle({
        fillColor: "purple",
        // radius: 10,
        size: [amount, amount],
        radius: amount/4,
        point: pos,
        rotation: n.angle
      });
      circles.push(c);
    }
    var master = circles[0];
    master.style.fillColor = "#00A8E1";
    master.style.strokeColor = "black";
    master.style.strokeWidth = 3;
    _.each(circles, function(circle, i){
      if(i == 0) return;
      next = master.unite(circle);
      master.remove();
      circle.remove();
      master = next;
    });
    master.bringToFront();
    // master.remove();
    return master;
  }
</script>
<div id="views">
  <button id="view-icon" class="pull-right btn btn-primary">
    <span class="glyphicon glyphicon-globe"></span>
  </button>
  <br class="clearfix"/>
  <div id="view-list">
    <ul>
      <li class="active">
        <span>GLOBAL</span>
        <button name="global" class="view btn-sm btn btn-primary">
         <span class="glyphicon glyphicon-globe"></span>
        </button>
      </li>
      <li>
        <span>INTERACTIVITY</span>
        <button name="interactivity" class="view btn-sm btn btn-danger">
          I
        </button>
      </li>
      <li>
        <span>SPACER</span>
        <button name="spacer" class="view btn-sm btn btn-default">
          S
        </button>
      </li>
      <li>
        <span>DIFFUSER</span>
        <button name="diffuser" class="view btn-sm btn btn-warning">
          D
        </button>
      </li>
      <li>
        <span>LIGHTS</span>
          <button name="light" class="view btn btn-sm btn-success">
            L
          </button>
        </li>
      <li>
       <span>CIRCUIT</span>
        <button name="circuit" class="view btn btn-sm btn-info">
          C
        </button>
      </li>
    </ul>
  </div>
</div>

<style type="text/css">
  #views{
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      padding: 4px 8px;
      color: #AAA;
      position: absolute;
      z-index: 1000;
      top: 60px;
      right: 25px;
      z-index: -1;
      /*text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);*/
   }
    .view{
      float: right;
      width: 20px;
      padding: 1px;
      height: 20px;
      margin-left: 5px;
    }
    .view:focus{
      outline: none;
    }
    #view-icon{
      width: 40px;
    }
      #view-icon:focus{
        outline: none;
      }
    #view-list{
      width: 175px;
      text-align: right;
      text-decoration: none;

    }
      #view-list ul{
        list-style-type: none;
      }
      #view-list ul li{
        margin: 2px 0;
      }
      #view-list ul li.active{
        color: #888;
      }
</style>
