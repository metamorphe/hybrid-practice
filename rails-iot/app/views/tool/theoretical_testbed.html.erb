<!DOCTYPE html>
<html>
<head>

<script type="text/javascript">
 var gui, testbed, uniformity, test;
  $(document).ready(function() {
    // Hide loading screen
    $('#shade').hide();

    // Load artwork and GUI
    paperSetup();
    paper.view.zoom = 1.2;
    testbed = new Artwork("/artwork/th_lens.svg", function(artwork){
        testbed.lensHeight = 3;
        testbed.proportionGlass = 0.00;
        testbed.eta = 1.44;
        testbed.theta = 0.5;
        guiSetup();

        // Load ray tracer
        testbed.led = CanvasUtil.queryPrefix("NLED")[0];
        testbed.bb = CanvasUtil.queryPrefix("BB")[0];
        testbed.lens = CanvasUtil.queryPrefix("LENS")[0];
        testbed.led.pivot = testbed.led.bounds.center;


        testbed.mediums = CanvasUtil.getMediums();
        testbed.lightSource = new PointLight({
            position: testbed.led.position.add(new paper.Point(0, 4)),
            mediums: testbed.mediums,
            parent: testbed.bb
        });
        testbed.updateLensHeight();
    });

  });

  /**
 * Produces the same result as numpy.convolve(array, weights, 'same');
 */
function convolve(array, weights) {
  if (weights.length % 2 !== 1)
    throw new Error('weights array must have an odd length');

  var al = array.length;
  var wl = weights.length;
  var offset = ~~(wl / 2);
  var output = new Array(al);

  for (var i = 0; i < al; i++) {
    var kmin = (i >= offset) ? 0 : offset - i;
    var kmax = (i + offset < al) ? wl - 1 : al - 1 - i + offset;

    output[i] = 0;
    for (var k = kmin; k <= kmax; k++)
      output[i] += array[i - offset + k] * weights[k];
  }

  return output;
}
  function gaussian_kernel(sigma, n)  // standard deviation, number of boxes
  {
      result = _.range(-n/2.0, n/2.0 + 1, n/(n-1));
      console.log(result)
      result =_.map(result, function(i){
        var a = 1/(sigma * Math.sqrt(2 * Math.PI))
        var b = 1/(Math.exp((i**2)/(2*sigma**2)));
        return a * b;
      });
      result = numeric.div(result, numeric.sum(result));
      return result;

    return result
  }

  var myLineChart = null;
  function createChart(signal, bins=100, resample=500){
   

    var labels = numeric.linspace(0, bins-1, 500);
    var data = numeric.spline(signal.x, signal.y).at(labels);
    var kernel = _.map(_.range(0, 5), function(el, i, arr){ return 1/arr.length; });
    // sigma = Math.sqrt(1.0/2/Math.log(2))
    // kernel = gaussian_kernel(50, 99); 
    data = convolve(data, kernel)

   
    var ctx = $("#myChart");
    
    if(_.isNull(myLineChart)){
      var options = {
        scales: {
            xAxes: [{
                display: false
            }], 
        },
        legend: {
          display: false,
        }, 
        animation: {
          duration: 0
        }
      }
      var data = {
      labels: labels,
      datasets: [
          {
              fill: true,
              backgroundColor: "rgba(75,192,192,0.4)",
              borderColor: "rgba(75,192,192,1)",
              pointBorderWidth: 0,
              pointRadius: 0,
              data: data,
              spanGaps: false
          }
      ]
      };


      myLineChart = new Chart(ctx, {
          type: 'line',
          data: data, 
          options: options
      });
    } else{
        myLineChart.data.datasets[0].data = data;
        myLineChart.update();
    }
    
   
  }

  // Extra class methods
  Artwork.prototype.updateEta = function() {
    const glassEta = 1.93;
    const pdmsEta = 1.44;
    this.eta = (this.proportionGlass * glassEta
        + (1 - this.proportionGlass) * pdmsEta);
    this.lens.name = 'LENS:_' + this.eta;
    this.trace();
  }

  Artwork.prototype.updateLensHeight = function() {
    // Assuming segments are assigned in the order: SW, NW, NE, SE
    var lens = this.queryPrefix('LENS')[0]
    var segments = lens.segments;
    var bottomY = segments[0].point.y;
    segments[1].point.y = bottomY - this.lensHeight;
    segments[2].point.y = bottomY - this.lensHeight;
    var ip = CanvasUtil.queryPrefix("IMG")[0];
    ip.position.y = lens.bounds.topCenter.y; //- Ruler.mm2pts(19.5 * 2);
    this.trace();
  }

  Artwork.prototype.trace = function() {
    // console.log('Beginning trace...')
    this.removeRays();
    testbed.mediums = CanvasUtil.getMediums();
    testbed.lightSource.mediums = testbed.mediums;
    this.lightSource.emmision(-60, 60, this.theta);
    paper.view.update();
    // console.log('... Trace finished!');
    var data = this.getSignal(30);
    data = {x: _.map(_.keys(data), function(n){return parseInt(n)}), y: _.values(data)}
    createChart(data, bins=30);
  }

  Artwork.prototype.removeRays = function() {
    _.each(CanvasUtil.queryPrefix("RAY"), function(ray) {
      ray.remove();
    });
  }

  Artwork.prototype.getSignal = function(numBins) {
    signal = ImagePlane.getSignal(numBins);
    // console.log(signal);
    return signal;
  }

  // Utility functions
  function paperSetup() {
    $('#myCanvas').attr('height', $(window).height());
    $('#myCanvas').attr('width', $(window).width());
    paper.install(window);
    paper.setup('myCanvas');
  }

  function guiSetup() {
    gui = new dat.GUI();
    gui.add(testbed, 'lensHeight')
      .min(1)
      .max(10)
      .step(1)
      .onChange(function(value) {
        testbed.updateLensHeight();
      });
    gui.add(testbed, 'proportionGlass', [
        0.00, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30,
        0.35, 0.40, 0.45, 0.50, 0.55
      ])
      .onChange(function(value) {
        testbed.updateEta();
      });
    gui.add(testbed, 'theta')
      .min(0.01)
      .max(1.00)
      .step(0.01)
      .onChange(function(value) {
        testbed.trace();
      });
    gui.add(testbed, 'eta').listen();
    gui.add(testbed, 'getSignal');
  }
</script>
</head>

<body>
  <canvas id="myCanvas"></canvas>
  <div class="chart-container">
    <canvas id="myChart"></canvas>
  </div>
    <% render :partial => "zoom_bar"%>
</body>

<style>
  .chart-container{
    position: absolute;
    top: 0;
    left: 0;
    background: "white";
    width: 350px;
    height: 200px;
    z-index: 1000;
    background: white;
    padding: 10px;
  }
  body, html{
    width: 100%;
    height: 100%;
    overflow: hidden;
    background: "white;
  }
</style>

</html>
