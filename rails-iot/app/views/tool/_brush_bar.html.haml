:coffeescript
  class window.BrushBar
    @setBrush: (jqNode, active) ->
      img = jqNode.attr('src')
      if _.isUndefined(img)
        return
      brushName = img.split('_')
      isActive = if active then 'Active.png' else 'NonActive.png'
      brushName[2] = isActive
      brushName = brushName.join('_')
      jqNode.attr 'src', brushName
      return
    constructor: (container) ->
      @container = container

      @toolbox = {}
      @state = true
      @brush = null
      @init()

      paper.tool = null
      @hide()

      return
    init: ->
      `var scope`
      scope = this
      $('#visibility-button').click ->
        scope.hide()
        return
      # BRUSH SETUP
      brushClasses = _.map($('.brush'), (brush) ->
        $(brush).attr 'tool'
      )
      _.each brushClasses, (brush) ->
        # console.log(brush);
        toolStr = 'new ' + brush + '(paper)'
        tool = eval(toolStr)
        scope.toolbox[brush] = tool
        return
      # BRUSH BEHAVIORS
      $('.brush').hover (->
        BrushBar.setBrush $(this), true
        return
      ), ->
        if $(this).attr('active') == 'active'
          return
        BrushBar.setBrush $(this), false
        return
      $('.brush').click ->
        $('.brush').attr 'active', ''
        _.each $('img.brush').not(this), (brush) ->
          BrushBar.setBrush $(brush), false
          return
        BrushBar.setBrush $(this), true
        # DISABLE OLD BRUSH
        if !_.isNull(scope.getCurrentBrush())
          oldbrush = scope.toolbox[scope.getCurrentBrush()]
          oldbrush.disable()
        # ACTIVATE BRUSH
        scope.brush = $(this).attr('tool')
        brush = scope.toolbox[scope.brush]
        brush.enable()
        console.log 'Enabling', scope.brush
        paper.tool = brush.tool
        $(this).attr 'active', 'active'
        return
      scope = this
      $('#cache-save').click ->
        `var led_data`
        # saveLED information
        name = fs.getName()
        led_data = CanvasUtil.queryPrefix('NLED')
        led_data = _.map(led_data, (led) ->
          data =
            position: [
              led.position.x
              led.position.y
            ]
            colorID: rgb2hex(led.colorID.toCanvasStyle())
            target: led.target
          if led.forceTarget
            data.forceTarget = led.forceTarget
          data
        )
        key = [
          'led'
          name
        ].join('_')
        console.log 'STORING', led_data
        ws.set key, JSON.stringify(led_data)
        return
      $('#cache-clear').click ->
        leds = CanvasUtil.queryPrefix('NLED')
        _.each leds, (led) ->
          rays = CanvasUtil.query(paper.project,
            prefix: 'RAY'
            originLight: led.id)
          CanvasUtil.call rays, 'remove'
          led.remove()
          return
        paper.view.update()
        $('#cache-save').click()
        return
      $('#cache-reload').click ->
        CanvasUtil.call CanvasUtil.queryPrefix('NLED'), 'remove'
        diffs = CanvasUtil.queryPrefix('DIF')
        name = fs.getName()
        key = [
          'led'
          name
        ].join('_')
        if ws.includes(key)
          led_data = JSON.parse(ws.get(key))
          console.log 'FETCHING', led_data
          _.map led_data, (data) ->
            console.log data
            led = new (paper.Path.Rectangle)(
              name: 'NLED: APA102C'
              size: new (paper.Size)(Ruler.mm2pts(LED_WIDTH), Ruler.mm2pts(LED_WIDTH))
              strokeColor: 'black'
              strokeWidth: 1
              opacity: 1.0
              parent: CanvasUtil.queryPrefix('ELD')[0]
              position: paper.view.center)
            led.fillColor = new (paper.Color)(data.colorID)
            led.colorID = new (paper.Color)(data.colorID)
            led.position = new (paper.Point)(data.position)
            led.target = data.target
            if data.forceTarget
              led.forceTarget = data.forceTarget
            paper.tool.holder.addRays diffs, led
            led
          vm.update()
          paper.view.update()
        return
      return
    getCurrentBrush: ->
      @brush
    update: ->
      if _.isNull(@brush)
        return
      @toolbox[@brush].update()
      return
    show: (now) ->
      scope = this
      if @state
        return
      @state = true
      if now
        @container.show()
        return
      cp.show()
      @container.animate { bottom: '0px' }, 500
      $('#visibility-button').html('HIDE').unbind('click').click ->
        scope.hide()
        return
      return
    hide: (now) ->

      scope = this
      if !@state
        return
      @state = false

      if now
        @container.hide()
        return
      @container.animate { bottom: '-100px' }, 500
      $('#visibility-button').html('SHOW').unbind('click').click ->
        scope.show()
        return
      return

  
/ BRUSH BAR
#brush-bar
  .task-bar
    / <button class="pull-left btn btn-xs btn-transparent">
    / <span class="glyphicon glyphicon-backward">
    / </button>
    %button#cache-save.pull-left.btn.btn-xs.btn-transparent
      %span.glyphicon.glyphicon-floppy-disk
    %button#cache-reload.pull-right.btn.btn-xs.btn-transparent
      %span.glyphicon.glyphicon-refresh
    %button#visibility-button.pull-right.btn.btn-xs.btn-transparent
      HIDE
    %br.clearfix
  .col-xs-5
    #brush-set
      %img.brush{:src => "/brushes/brush_CircuitBrush_NonActive.png", :tool => "LEDPlacerBrush"}
      / <img class="brush" tool="FillBrush" src="/brushes/brush_PaintCan_NonActive.png">
      / <img class="brush" tool="MagicWandBrush" src="/brushes/brush_MagicWand_NonActive.png">
      / <img class="brush" tool="HeatBrush" src="/brushes/brush_HeatGun_NonActive.png">
      / <img class="brush" tool="LinkBrush" src="/brushes/brush_LinkBrush_NonActive.png">
    / SET OF TOOLS HERE
  .col-xs-4
    %h3 Status
  .col-xs-3
    = render :partial => "socket_control"
:css
  #brush-set{
        margin-left: 20px;
      }
      .brush{
        height: 115px;
        margin: 4px 2px;
      }
      #brush-bar{
        padding: 4px 8px;
        background: blue;
        position: absolute;
        bottom: 0;
        left: 5%;
        width: 90%;
        height: 125px;
        color: #a19e99;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.45);
  
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#3b3a38+0,181617+98 */
        background: #3b3a38; /* Old browsers */
        background: -moz-linear-gradient(top, #3b3a38 0%, #181617 98%); /* FF3.6-15 */
        background: -webkit-linear-gradient(top, #3b3a38 0%,#181617 98%); /* Chrome10-25,Safari5.1-6 */
        background: linear-gradient(to bottom, #3b3a38 0%,#181617 98%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3b3a38', endColorstr='#181617',GradientType=0 ); /* IE6-9 */
  
  
        -webkit-box-shadow: 0px -5px 24px 3px rgba(0,0,0,0.09);
        -moz-box-shadow: 0px -5px 24px 3px rgba(0,0,0,0.09);
        box-shadow: 0px -5px 24px 3px rgba(0,0,0,0.09);
  
      }
        #brush-bar.task-bar{
          height: 10px;
          margin-bottom: 5px;
        }
      #send-button{
        margin: 15% 0;
      }
