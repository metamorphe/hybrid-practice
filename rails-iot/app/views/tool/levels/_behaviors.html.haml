:coffeescript
  $ ->
    $("#behavior_name").on "change input", (e)->
      name = $(this).val().trim()
      if name == "" then name = "CURRENT_BEHAVIOR"
      $('#current_behavior span.name').html(name)
    $('#repeat').click ()->
      $(this).toggleClass('active')
    $('behaviornode').draggable
      cursorAt: { bottom: 5 }
      revert: true
      appendTo: '#ui2'
      scroll: false
      helper: ()->
        copy = $(this).clone()
        return copy;
%event#behaviors.composition-design.playground
  .toolbar.full-hoz
    %fieldset
      %button.btn.btn-xs.btn-ghost NAME
      %input#behavior_name{value: "BEHAVIOR_1", type: "text"}
    .btn-group
      %button.btn.btn-xs.btn-ghost
        =glyph "trash"
        CLEAR
      %button.btn.btn-xs.btn-ghost
        =glyph "floppy-disk"
        SAVE
  .content.full-hoz  
    %button.btn.btn-xs.btn-info.toggle
      =glyph "collapse-up"
    .sidebar.vert.centered
      / %button#compose.design-title.btn-primary.trigger{:type => "trigger"}
      /   %span.name BEHAVIOR
      /   %span.command &lt;SPACE&gt
      %acceptor#current_behavior.behavior.accepted{:data => {:id=> 0, :accept=> 1}}
        %behaviornode
          %p 
            %span.name STAGGER BEHAVIOR
          %p.info
            %span.tracks 
              %span.val 3
              %span T
            %span /
            %span.actuators
              %span #
              %span.val 20
              
          %p.time
            %span 2300 ms
          %p.repeat 
            %span (
            %span.val no-repeat
            %span ) 
    #behavior_environment.workarea.vert-centered-sink-top
      #timeruler.hoz
        %button#add-stage.btn.btn-xs.btn-ghost
          = glyph "plus"
          NEW STAGE

        %button#repeat.btn.btn-xs.btn-ghost
          = glyph "repeat"
          REPEAT
      - if true
        %behavior.hoz
          #stage.vert-centered-sink-top
            %acceptor.actuator.template{:data => {:accept=> 1}}
            %acceptor.actuator{:data => {:id=> 0, :accept=> 1}}
            %acceptor.actuator{:data => {:id=> 1, :accept=> 1}}
          #timetrack.vert-centered-sink-top
            #scrubber.vert-centered-sink-top
              #handle
              #timeline
            = render :partial => "tool/levels/behavior_track", locals: {is_template: false}
            = render :partial => "tool/levels/behavior_track", locals: {is_template: false}
           
        