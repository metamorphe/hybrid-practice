:coffeescript 
  class window.ViewManager
    @CANVAS_COLOR:'rgb(245, 244, 240)'
    @MAX_APA102C_RAY_LENGTH: 25
    constructor: (container) ->
      @container = container
      @state = true
      @view = 'NORMAL'
      @last_view = 'NORMAL'
      @init()
      @show()
      return

    init: ->
      @hide true
      scope = this
      @update()
      # CONTROL LOGIC
      $('#view-icon').click ->
        if scope.state
          scope.hide()
        else
          scope.show()
        return
      $('#view-list ul li').click ->
        $('#view-icon').html $(this).children('button').html()
        $('#view-list ul li').removeClass 'active'
        $(this).addClass 'active'
        $('#view-icon').attr('class', $(this).children('button').attr('class')).removeClass('view').removeClass('btn-sm').addClass 'pull-right'
        scope.view = $(this).children('button').attr('name').toUpperCase()
        scope.update()
        bb.update()
        return
      @update()
      return
    getCurrentView: ->
      @view
    update: ->
      view = @getCurrentView()
      if @last_view != view
        @last_view = view
        sm.selection = []
        sm.update()
      console.log 'VIEW', view
      e = Pipeline.getElements()
      all = [
        e.art
        e.diff
        e.leds
        e.bo
        e.bi
        e.cp
        e.dds
        e.mc
        e.base
        e.wires
      ]
      switch view
        when 'NORMAL'
          $('#main-canvas').css 'background', ViewManager.CANVAS_COLOR
          show = [e.art, e.diff, e.leds, e.dds, e.base];
          hide = [e.rays, e.cp, e.mc, e.bo, e.bi, e.nuts, e.wires];
          _.each e.leds, (led) ->
            led.set
              fillColor: if led.colorID then led.colorID else '#FFFFFF'
              strokeColor: 'black'
              strokeWidth: 1
              opacity: 1.0
            return
          CanvasUtil.set e.diff,
            fillColor: '#DFDFDF'
            strokeWidth: 2
            strokeColor: 'black'
            opacity: 1.0
          CanvasUtil.set e.dds,
            fillColor: '#DFDFDF'
            strokeWidth: 1
            strokeColor: 'blue'
            opacity: 0.5
        when 'RAYS'
          $('#main-canvas').css 'background', ViewManager.CANVAS_COLOR
          show = [
            e.diff
            e.leds
            e.rays
          ]
          hide = [
            e.art
            e.bo
            e.bi
            e.cp
            e.mc
            e.base
            e.wires
          ]
          _.each e.leds, (led) ->
            color = if _.isUndefined(led.colorID) then '#FFFFFF' else led.colorID
            led.set
              fillColor: color
              strokeColor: color
              strokeWidth: 1
              opacity: 1.0
            return
          CanvasUtil.set e.diff,
            fillColor: 'black'
            strokeWidth: 0
          CanvasUtil.set e.dds,
            fillColor: 'black'
            strokeColor: '#333'
          CanvasUtil.call e.leds, 'bringToFront'
        when 'WHITE_RAYS'
          $('#main-canvas').css 'background', ViewManager.CANVAS_COLOR
          show = [
            e.diff
            e.leds
            e.rays
          ]
          hide = [
            e.art
            e.bo
            e.bi
            e.cp
            e.mc
            e.base
            e.wires
          ]
          _.each e.leds, (led) ->
            color = '#FFFFFF'
            led.set
              fillColor: color
              strokeColor: color
              strokeWidth: 1
              opacity: 1.0
            return
          CanvasUtil.set e.diff,
            fillColor: 'black'
            strokeColor: '#333'
          CanvasUtil.set e.dds,
            fillColor: 'black'
            strokeColor: '#333'
        when 'LIGHTS'
          $('#main-canvas').css 'background', '#111'
          show = [ e.rays ]
          _.each e.leds, (led) ->
            led.set opacity: 0.2
            return
          hide = [
            e.diff
            e.art
            e.bo
            e.bi
            e.cp
            e.dds
            e.mc
            e.base
            e.wires
          ]
        else
          break
      CanvasUtil.set _.flatten(show), 'visible', true
      CanvasUtil.set _.flatten(hide), 'visible', false
      paper.view.update()
      return
    show: (now) ->
      if @state
        return
      @state = true
      if now
        $('#view-list').show()
        return
      $('#view-list').toggle 'slide', { direction: 'up' }, 300
      return
    hide: (now) ->
      if !@state
        return
      @state = false
      if now
        $('#view-list').hide()
        return
      $('#view-list').toggle 'slide', { direction: 'up' }, 300
      return


#views
  %button#view-icon.pull-right.btn.btn-primary
    %span.glyphicon.glyphicon-globe
  %br.clearfix/
  #view-list
    %ul
      %li.active
        %span NORMAL
        %button.view.btn-sm.btn.btn-primary{:name => "normal"}
          %span.glyphicon.glyphicon-globe
      %li
        %span COLORED RAYS
        %button.view.btn-sm.btn.btn-danger{:name => "rays"}
          R
      %li
        %span WHITE RAYS
        %button.view.btn-sm.btn.btn-info{:name => "white_rays"}
          W
      %li
        %span LIGHTS OUT
        %button.view.btn-sm.btn.btn-success{:name => "lights"}
          L
