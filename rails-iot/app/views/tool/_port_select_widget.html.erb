<script>
var sc;

$(function(){
	sc = new SocketControl({
		trigger: $('#socket-button'), 
		connect_func: function(dom){
			port = $('#port-selector').val();
			dom.removeClass('btn-danger btn-success').addClass('btn-default').find('span').removeClass('glyphicon-send glyphicon-remove').addClass('glyphicon-remove');
			$('#port-selector').prop('disabled', 'disabled');
			$('#port-status').html(port);
		}, 
		error_func: function(dom){
			dom.removeClass('btn-default btn-success').addClass('btn-danger').find('span').removeClass('glyphicon-send glyphicon-ok').addClass('glyphicon-remove');
			$('#port-status').html("–");
		},
		disconnect_func: function(dom){
			dom.removeClass('btn-danger btn-default').addClass('btn-success').find('span').removeClass('glyphicon-ok glyphicon-remove').addClass('glyphicon-send');
			$('#port-selector').prop('disabled', false);
			$('#port-status').html("–");
		}
	});

	var els = _.map(ports, function(el, i, arr){
	  var name = el.split('/');
	  name = name[name.length-1];
      var dom =  $('<option></options>').html(name.toUpperCase())
      	.attr('value', el);
      return dom;
    });

    $('#port-selector').html(els);

})

SocketControl.DISCONNECTED = 0; 
SocketControl.ERROR = -1; 
SocketControl.CONNECTED = 1; 

function SocketControl(options) {
  this._properties = options;
  this.state = SocketControl.DISCONNECTED; 
  this.init();
}

SocketControl.prototype = {
  init: function() {
  	var scope = this;
  	this._properties.trigger.click(function(){
  		console.log("CLICKED", scope.state);
  		switch(scope.state){
			case SocketControl.DISCONNECTED:
				scope.connect();
				break;
			case SocketControl.CONNECTED:
				scope.disconnect();
				break;
			case SocketControl.ERROR:
				scope.connect();
				break;
  		}
  	});
  	this.update();
  },
  update: function(){
  	var scope = this;

  	switch(this.state){
  	   case SocketControl.DISCONNECTED:
  		this._properties.disconnect_func(scope._properties.trigger);
  		break;
  	   case SocketControl.CONNECTED:
  	   	this._properties.connect_func(scope._properties.trigger);
  	   	break;
  	   case SocketControl.ERROR:
  	   	this._properties.error_func(scope._properties.trigger);
  	   	break;
  	}
  },
  disconnect: function(){
  	this.ws.onclose = function () {}; // disable onclose handler first
    this.ws.close();
    this.state = SocketControl.DISCONNECTED;
    this.update();
  },
  connect: function() {
    var scope = this;
    this.ws = new WebSocket("ws://localhost:3015");
    scope.state = SocketControl.DISCONNECTED;

    this.ws.onopen = function() {
      scope.state = SocketControl.CONNECTED;
      scope.update();
    };
    this.ws.onclose = function() {
      scope.state = SocketControl.DISCONNECTED;
      scope.update();
    };
    this.ws.onerror = function() {
      scope.state = SocketControl.ERROR;
      scope.update();
    };
    this.ws.onmessage = function(evt) {
        if(evt.data){
          try{
            console.log('↑', evt.data);
          }
          catch(e){
            console.log("ERROR", e, evt.data);
            scope.state = SocketControl.ERROR;
          }
        }
    	scope.update();
    }
  },
  /**
   * No ACK-checking, UDP style.
   */
  sendMessage: function(msgString) {
	    try{
	    	this.ws.send(msgString);
		    console.log('↓', msgString);
	    }
	    catch(e){
	    		console.error('ERROR SENSING', msgString);
	    	}
    	return true;
    } 
  
}

</script>

<div id="port-select" class="widget status">
	<label class="widget-title" name="Port Select"></label>
	<div class="widget-body">
	  <span id="port-info"> CONNECTED TO: <span id="port-status"> – </span></span><br>
	  <select id="port-selector" class="form-control-special  col-xs-9">
	  </select> 

	  <div class="socket-btns btn-group col-xs-3 nopadding">
		<button id="socket-button" class="btn btn btn-success btn-block">
		  <%= glyph "send" %>
	    </button>
	  </div>
	  <br class="clearfix">
	</div>
</div>
<style>
	#port-info{
		color: #00A8E1;
		/*font-weight: bold;*/
		font-size: 8pt;
	}
	#port-status{
		color: white;
		font-style: italic;
		font-weight: normal;
		font-size: 8pt;
	}
</style>