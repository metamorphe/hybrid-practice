:coffeescript
  app = 
    name: "Annotator App"
    # file: "/actuation/devices/chevrons.svg"
    file: "/actuation/aquarium_pumps.svg"
    filename: ()-> 
      x = @file.split('.')
      x = x[0].split('/')
      return x[x.length-1]
    defaultFillColor: ()->
      c = new paper.Color(245, 244, 240)
      c.brightness = 0.7
      c.alpha = 0.5
      return c
    initialize: ()->
      console.log "Initializing", @name
      @bindEvents()
    bindEvents: ()->
      scope = this
      $ -> 
        scope.onDocumentReady()
        $("#save").click (e)-> scope.save(scope.filename(), "webstorage")
        $("#download").click (e)-> scope.save(scope.filename(), "disk")
        $('#shade').fadeOut()
        $("#quick-annotations button").click (e)->
          $(this).toggleClass('active')
        $('.note').click (e)->
          $(this).toggleClass('active')
        $('#tabs button').click (e)->
          goto = $(this).attr('goto')
          panels = $(this).parents('.dragpanel').find('.tab-content').hide().removeClass(".active")
          console.log panels.length
          $(goto).show().addClass('active')
          $('#tabs button.selected').removeClass('selected')
          $(this).addClass('selected')
        $('#zoom-in').click ()->
          paper.view.zoom += 0.1
        $('#zoom-out').click ()->
          paper.view.zoom -= 0.1

    onDocumentReady: ()->
      window.ws = new WebStorage()
      @jsonEditorInitialize()
      @paperLoad()
      $('#system-message.error').on 'mouseenter', (e)->
        $('li.error').addClass('mouseover')
      .on 'mouseleave', (e)->
        $('.mouseover').not('active').removeClass('mouseover')
      $('.dragpanel').draggable
        containment: "parent"
        handle: ".draghandle"
      .resizable
        handles: "n, e, s, w"
    paperLoad: ()->
      paper = window.Utility.paperSetup("annotator")
      paper.settings.handleSize = 8

      scope = this
      
      onsvgload = (svg)->
        console.log "IMPORTING", svg
        scope.svg = svg
        paper.view.update()
        tree = scope.extract_tree(svg, $("<ul>"))
        $('#svg-tree').append(tree)
        scope.validate(svg)
        svg.set
          position: paper.view.centerr
        svg.fitBounds(paper.view.bounds)
        svg.position = paper.view.center
        paper.tool = createSelectionTool()
      
      if ws.includes(@filename())
        console.log "Loading imported..."
        cache = ws.get(@filename())
        svg = paper.project.importJSON JSON.parse cache
        onsvgload(svg[0].children[0])
      else 
        console.log "Loading svg..."
        paper.project.importSVG @file, onsvgload
    
    validate: (svg)->
      $('#system-message').removeClass('error').removeClass("success")
      @json_validate(svg)
      errors = $(".error").length
      if errors > 0
        $('.success-alert').hide()
        $('.error-alert').show()
        $('#error-count').html(errors)
        $('#system-message').addClass('error')
      else
        $('.error-alert').hide()
        $('.success-alert').show()
        $('#system-message').addClass('success')


    json_validate: (svg)->
      scope = this
      try
        JSON.parse(svg.name)
        if svg.dom then svg.dom.removeClass("error")
      catch error
        if error instanceof SyntaxError and svg
          if not svg.errors then svg.errors = []
          svg.errors.push error
          if svg.dom then svg.dom.addClass("error")
      if svg.children
        _.each svg.children, (child)-> scope.validate(child)

    onJSONClick: (e)->
      if window.editor
        try
          json = JSON.parse($(this).html())
          window.editor.set json

          $('button.active').removeClass('active')
            
          _.each json, (v, k)->
            console.log "HELLO"
            console.log '.attr-variable[name="'+k+'"]'
            $('.attr-variable[name="'+k+'"]').addClass('active')
            $('.' + k + "-value").val(v)
          if json["class"]
            classes = json["class"].split(' ')
            console.log "CLASSES", classes
            _.each classes, (c)->
              c = ".class-variable[name='" + c.trim() + "']"
              $(c).addClass('active')

        catch
          window.editor.set {class: ""}

      $(this).parent().toggleClass('active')
      if $(this).parent().hasClass('active') then $(this).parent().removeClass('mouseover')
      
      hit = paper.project.getItem({id: $(this).parent().data('paper-id')})
      hit.active = $(this).parent().hasClass('active')
      paper.tool.update()
      e.stopPropagation()
    processName: (item)->
      name = item.name
      if _.isUndefined(name) or _.isNull(name) then return JSON.stringify({})
      name = name.trim()
      name = name.replaceAll("_x5F_", "_")
      name = name.replaceAll("_x23_", "#")
      name = name.replaceAll("_x27_", "")
      name = name.replaceAll("_x22_", '"')
      name = name.replaceAll("_x7B_", '{')
      name = name.replaceAll("_x7D_", '}')
      name = name.replaceAll("_x5B_", '[')
      name = name.replaceAll("_x5D_", ']')
      name = name.replaceAll("_x2C_", ',')
      name = name.replaceAll("_", ' ')
      lastBracketIdx = name.lastIndexOf("}")
      if lastBracketIdx > -1 then name = name.slice(0, lastBracketIdx + 1)

    extract_tree: (svg, root)->
      scope = this
      @processName(svg)
     
      if svg and svg.className == "Shape" then svg = svg.replaceWith(svg.toPath())
      if svg and svg.className == "Path" and not svg.fillColor then svg.fillColor = @defaultFillColor()

      svg.set
        name: @processName(svg)
        active: false
      
      type = $('<b>').html(svg.className)
      data = $('<span>').addClass('json').html(svg.name).click scope.onJSONClick
      svg.dom = $('<li>').append([type, data]).data('paper-id', svg.id)
        .addClass('uncollapsed')
        .click (e)->
          $(this).toggleClass('collapsed').toggleClass('uncollapsed').children("ul").toggle()
          e.stopPropagation()
        .on 'mouseenter', (e)->
          if $(this).hasClass('active') then return
          hit = paper.project.getItem({id: $(this).data('paper-id')})
          hit.selected = true
          e.stopPropagation()
          $(this).addClass('mouseover')
        .on 'mouseleave', (e)->
          $('.mouseover').not('active').removeClass('mouseover')
          items = paper.project.getItems({selected: true})
          _.each items, (item)->
            item.selected = false

      root.append(svg.dom)
      
      # if svg.errors then svg.dom.addClass("error")
      if not svg.children or svg.children.length == 0 then svg.dom.addClass('leaf') 
      else
        _.map svg.children, (child)->
          list = $("<ul>")
          svg.dom.append(list)
          scope.extract_tree(child, list)
      return root
    jsonEditorInitialize: ()->
      scope = this
      container = document.getElementById('jsoneditor')
      options = {}
      window.editor = new JSONEditor(container, options)
      json = 
        class: "boundary"
        id: 1
      editor.set json
      $("#savemetadata").click (e)->
        json = editor.get()

        # # quick annotation
        # attributes = _.map $('.tab-content.active .attr-variable.active'), (attrVar)->
        #   return [$(attrVar).attr('name'), $(attrVar).parents('.input-group').find('input').val()]
        # classes = _.map $('.tab-content.active .class-variable.active'), (classVar)->
        #   return $(classVar).attr('name')
        # json = _.extend json, 
        #   class: classes.join(" ")
        # json = _.extend json, _.object attributes


        $('.active').children('.json').html(JSON.stringify(json))
        actives = $('.active').children('.json')
        _.each actives, (el)->
          id = $(el).parent().data('paper-id')
          svg = paper.project.getItem({id: id})
          svg.name = JSON.stringify(json)
          
        $('.active').children('.json').html(JSON.stringify(json))
        scope.validate(scope.svg)
    save: (filename="artwork", storage='webstorage')->
      prev_zoom = paper.view.zoom
      paper.view.zoom = 1

      items = paper.project.getItems({activestyle: true})
      console.log "Removed", items.length
      items =_.map items, (item)->
          item.remove()
      paper.view.update()

      switch storage
        when "webstorage"
          exp = paper.project.exportJSON
            asString: true
            precision: 5

          ws.set(filename, exp)
        when "disk"
          exp = paper.project.exportSVG
            asString: true
            precision: 5
          saveAs(new Blob([exp], {type:"application/svg+xml"}), filename + ".svg");
      
      paper.tool.init()
      paper.view.zoom = prev_zoom
      paper.view.update()    

    
  app.initialize()
  window.createSelectionTool = ()->
    t = new paper.Tool
      name: "selectionTool"
      minDistance: 10
      hitOptions: 
        segments: false
        stroke: true 
        fill: true
        tolerance: 10   
      init: ()->
        items = paper.project.getItems
          className: /^(?!Layer).*$/
        _.each items, (item)-> 
          item.saveable = true
          if item.className == "Shape"
            item.activeStyle = new paper.Path
              saveable: false
              visible: false
              activestyle: true
          else
            item.activeStyle = item.clone().set
              saveable: false
              activestyle: true
              fillColor: "blue"
              strokeColor: "yellow"
              strokeWidth: 5
              opacity: 0.3
              visible: false
      update: ()->
        items = paper.project.getItems
          saveable: true
          className: /^(?!Layer).*$/

        _.each items, (item)-> 
          item.activeStyle.visible = item.active

      onMouseDown: (e)->
        selected = paper.project.selectedItems
        
        _.each selected, (item)-> 
          item.active = not item.active
          if item.dom
            item.dom.toggleClass("active")

        if selected.length == 0
          items = paper.project.getItems
            saveable: true
            className: /^(?!Layer).*$/
          _.each items, (item)-> 
            item.active = false
            item.dom.removeClass("active")

        this.update()  
      
      onMouseMove: (e)->
        hitResult = paper.project.hitTest e.point, t.hitOptions
        items = paper.project.selectedItems
        items = _.filter items, (item)-> item.saveable

        _.each items, (item)-> 
          item.selected = false
          if item.dom
           item.dom.removeClass("mouseover")
        
        if hitResult and hitResult.item.saveable
          if hitResult.item.selected then return
          hitResult.item.selected = true
          if hitResult.item.dom
            hitResult.item.dom.addClass("mouseover")
    t.init()
    return t;


#metadata-panel.dragpanel
  .heading.draghandle
    %ul#tabs
      %li
        %button.btn-default.btn.btn-sm.selected{goto: "#json-editor.tab-content"}
          JSON Editor
      %li
        %button.btn-default.btn.btn-sm{goto: "#thermopainting.tab-content"}
          Thermopainting
  .body
    #json-editor.tab-content
      #jsoneditor
    #thermopainting.tab-content
      = render "thermopainting"      
  .footer
    %button.btn.btn-success.btn-block#savemetadata
      %span.glyphicon.glyphicon-floppy-disk
      SAVE METADATA

.canvas-container
  %canvas#annotator
  .btn-group-vertical#zoom
    %button#zoom-in.btn.btn-xs.btn-info
      = glyph "plus"
    %button#zoom-out.btn.btn-xs.btn-info
      = glyph "minus"


#annotation-panel.dragpanel
  .heading.draghandle
    %ul#tabs
      %li
        %button.btn-default.btn.btn-sm.selected{goto: "#svg-viewer.tab-content"}
          SVG VIEWER
      %li
        %button.btn-default.btn.btn-sm{goto: "#settings.tab-content"}
          %span.glyphicon.glyphicon-cog
  .body
    #svg-viewer.tab-content
      #system-message.success
        %span.glyphicon.glyphicon-warning-sign.error-alert
        %span.error-alert
          %b#error-count 25 
          %span ERRORS DETECTED
        %span.success-alert
          %span DESIGN PASSED VALIDATION
      #svg-tree
    #settings.tab-content
      %p 
        %b LAST UPDATED
        %span 2017 Aug 17
      %hr
      .form-group
        %b FILENAME
        %input.form-control{type: "text", placeholder: "chevron.svg"}
      %hr
      .form-group
        %input{type: "checkbox", checked: true}
        %b AUTOSAVE
        %p.help-block Information will be cached in webstorage.
      %hr
      .form-group
        %b QUICK ANNOTATION SCHEMAS
        %br
        %br
        .list-group#quick-annotations
          %button.list-group-item{value: "circuit"} CIRCUIT
          %button.list-group-item{value: "illumination"} ILLUMINATION
          %button.list-group-item{value: "actuation"} ACTUATION
          %button.list-group-item{value: "thermopainting"} THERMOPAINTING



  .footer
    .btn-group
      %button.btn.btn-default#download
        %span.glyphicon.glyphicon-download
        DOWNLOAD
      %button.btn.btn-default#save
        %span.glyphicon.glyphicon-floppy-disk
        SAVE

   

:scss
  $borderColor: #D3D3D3;
  $arrowColor: #7A7A7A;
  $subtleText: #80858B;

  $activeBackground: #4573B9;
  $activeText: #FFFFFF;
  $activeSubtleText: #C5C5C5;
  $activeArrowColor: #DDDDDD;
  
  $error: desaturate(#eb3941, 10%);
  $errorBorder: darken(#eb3941, 20%);
  $success: darken(#dff0d8, 30%);
  $successText: white;

  $formBlue: #3883fa;
  $panelBackground: #F5F5F5;
  $hoverText: #ECF1FA;
  $eggshell: rgb(245, 244, 240);
  html, body{
    width: 100%; 
    height: 100%;
    overflow: hidden;
  }

  #settings{
    padding: 15px;
    display: none;
  }
  #zoom{
    position: absolute;
    top: 15px;
    right: 15px;
  }
  button.note{
    outline: none;
    &:active{
      outline: none !important;
    } 
    &:focus{
      background: white !important;
      outline: none !important;
    }
    
    &.active{
      background: $formBlue !important;
      color: white;
      &:active{
      background: $formBlue;
      color: white;
      }
      &:hover{
        background: $formBlue;
        color: white;
      }
      &:focus{
        outline: none !important;
        background: $formBlue !important;
        color: white !important;
      }
    }
  }
  #tabs{
    padding-left: 5px;
    li{ 
      display: inline;
      z-index: 9;
    }
    button{
      position: relative;
      background: darken($panelBackground, 10%);
      z-index: 9;
      &.selected{
        &:focus{
          outline: none;
        }
        z-index: 10000;
        border-bottom: none;
        top: -3px;
        line-height: 144%;
        padding-bottom: 3px;
        border-width: 2px;
        font-weight: bold;
        border-bottom-left-radius: 0px;
        border-bottom-right-radius: 0px;
        background: lighten($panelBackground, 10%);
      }
    }

  }
  #system-message{
    height: 30px;
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    justify-content: center;
    border-radius: 6px;
    margin-bottom: 3px;
    span{
      margin-right: 5px;
    }
    &.error{
      background: lighten($error, 10%);
      border: lighten($errorBorder, 10%) 1px solid;
      text-align: center;
      color: white;
    }
    &.success{
      background: $success;
      border: darken($success, 10%) 1px solid;
      text-align: center;
      color: $successText;
    }

  }

  #annotation-panel{
    width: 30%;
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
    background: desaturate(darken($eggshell, 50%), 15%);
    .heading{
      text-align: left;
    }
  }
  #metadata-panel{
    width: 345px;
    position: absolute;
    left: 0;
    top: 0;
    height: 60%;
    background: desaturate(darken($eggshell, 50%), 15%);
    #jsoneditor{
      width: 100%;
      height: 100%;
    }
  }
  .dragpanel{
    cursor: pointer;
    color: #262626;
    position: relative;
      
    .heading{
        background: $panelBackground;
        border-top: 1px solid $borderColor;
        border-left: 1px solid $borderColor;
        border-right: 1px solid $borderColor;
        text-align: center;
        padding: 5px;
        font-family: Avenir;
        font-weight: bold;
        height: 30px;
        margin-bottom: 0px !important;
        z-index: 100;

    }
    .footer{
      padding: 10px 10px;
      height: 55px;
      position: absolute;
      z-index: 9;
      bottom: 0;
      left: 0;
      width: 100%;
      overflow: hidden;
      background: $panelBackground;
      border: 1px solid $borderColor;
      display: flex;
      flex-flow: row nowrap;
      align-items: center;
      justify-content: center;
    }
    .tab-content{
      width: 100%;
      height: 100%;
    }
    .body{
      border-top: 2px solid $borderColor;
      border-left: 1px solid $borderColor;
      border-bottom: 1px solid $borderColor;
      border-right: 1px solid $borderColor;
      padding: 5px 5px;
      height: calc(100% - 55px - 30px);
      width: 100%;
      overflow-y: scroll;
      background: white;
      z-index: 200;
      position: relative;      
      ul{
        padding-left: 0px; 
        cursor: pointer;
        padding-left: 5px;
      }
      & > ul ul{
        padding-left: 10px;
      }
      & > ul > li li{
        border-left: 1px solid #00A8E1;
      }
      li{
        display: block;
        position: relative;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        cursor: pointer;
        &.mouseover{
          background: $hoverText;
        }
      }

      li.active{
        background: $activeBackground;
        color: $activeText;
        span{
          color: $activeSubtleText;
        }
        &:not(.leaf):before {
          border-color: transparent $activeArrowColor transparent transparent;
        }
      }
      li b{
        padding-left: 25px;
        padding-right: 5px;
      }
      li span{
        color: $subtleText;
      }
      li.error{
        & > b{
          padding-left: 34px;
        }
        &:after{
          background: $error;
          border: $errorBorder 1px solid;
          content: "!";
          width: 12px;
          height: 12px;
          border-radius: 10px;
          position: absolute;
          top: 4px;
          left: 18px;
          color: white;
          font-size: 10px;
          line-height: 10px;
          text-align: center;
          font-weight: bold;
          text-shadow: 1px 1px 3px #666666;
        }
      }

      :not(.leaf).uncollapsed:before {
          content:"\A";
          border-style: solid;
          border-width: 4px 8px 4px 0;
          border-color: transparent $arrowColor transparent transparent;
          transform: rotate(180deg);
          position: absolute;
          top: 5px;
          left: 5px;
      }
      :not(.leaf).collapsed:before {
          content:"\A";
          border-style: solid;
          border-width: 4px 8px 4px 0;
          border-color: transparent $arrowColor transparent transparent;
          transform: rotate(-90deg);
          position: absolute;
          top: 7px;
          left: 7px;
      }
    }
  }
  .canvas-container{
    top: 0;
    width: 70%;
    height: 100%;
    position: relative;
  }
  canvas{
    width: 100%;
    height: 100%;
    background: $eggshell;
    border: 15px solid darken($eggshell, 2%);
    cursor: pointer;
  }
  .table-editable {
    position: relative;
    
    .glyphicon {
      font-size: 20px;
    }
  }

  .table-remove {
    color: #700;
    cursor: pointer;
    
    &:hover {
      color: #f00;
    }
  }

  .table-up, .table-down {
    color: #007;
    cursor: pointer;
    
    &:hover {
      color: #00f;
    }
  }

  .table-add {
    color: #070;
    cursor: pointer;
    position: absolute;
    top: 8px;
    right: 0;
    
    &:hover {
      color: #0b0;
    }
  }