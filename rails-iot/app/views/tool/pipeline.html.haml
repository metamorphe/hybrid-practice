:css
  #zoom-bar{
    left: 15px;
    right: auto !important;
    top: 80px !important;
  }
:javascript
  var files = #{@files.to_json.html_safe};
:coffeescript
  makeEditor = (id)->
    editor = ace.edit(id)
    editor.setTheme("ace/theme/monokai")
    editor.getSession().setMode("ace/mode/javascript")
    editor.renderer.setShowGutter(true)
    editor.renderer.setScrollMargin(10, 10)
    return editor
  $ ->
    window.vm = null;
    window.editor = makeEditor('code')
    $('.popout').hide();
    $('.dismiss').click ->
      $(this).parents(".popout").hide()
    window.ws = new WebStorage
    $('#shade').fadeOut()
    dom = $('#main-canvas')
    window.fs = new ProjectFileManager
      paper: Utility.paperSetup(dom)
      files: files
      selector: $('#file-selector')
      onLoad: (data) ->
        zb = new ZoomBar($('#zoom-bar'), 1.0, paper)
        loadCustomLibraries()
        
        window.pm = new PipeManager

        return

    $('#png-download').click ->
      result = CanvasUtil.queryPrefix('RESULT')
      if _.isEmpty(result)
        console.warn 'No RESULT wrapper found for export'
        return
      result = result[0]

      dim = 
        w: Ruler.pts2mm(result.strokeBounds.width)
        h: Ruler.pts2mm(result.strokeBounds.height)
        d: result.model_height

      $('.popout').fadeIn()
      editor.setValue("")
      editor.insert("/* " + fs.getName() + '\n')
      editor.insert(" * " + "Measurments in millimeters (mm)" + '\n')
      editor.insert(" * " + "Zoom "+paper.view.zoom.toFixed(2)+ '\n')
      editor.insert(" */" + '\n')
      editor.insert("m = {\n\tw:\t" + dim.w.toFixed(2) + ",\n")
      editor.insert("\th:\t" + dim.h.toFixed(2) + ",\n")
      editor.insert("\td:\t" + dim.d.toFixed(2) + "\n}\n")
     
      result.fitBounds paper.view.bounds.expand(-5)
      name = fs.getName()
      fn = name + '_' + pm.getCurrentView()
      ButtonExporter.exportPNG result, fn, $(this)
    
      return
    $('#svg-download').click ->
      paper.view.zoom = 1
      name = fs.getName()
      fn = name + '_' + pm.getCurrentView()
      ButtonExporter.exportSVG fn
      return
      
    $('#view-list ul li button[name="spacer"]').click();
    return


= render :partial => "tool/levels/file_pipeline"

#views
  %button#view-icon.pull-right.btn.btn-primary EL
  %br.clearfix/
  #view-list
    %ul
      /
        <li class="active">
        <span>RAYTRACE</span> <button name="raytrace" class="view btn-sm btn btn-info"> RT</button>
        </li>
      %li
        %span MOLD
        %button.view.btn-sm.btn.btn-info{:name => "mold"} M
      %li
        %span DIFFUSER
        %button.view.btn-sm.btn.btn-info{:name => "diffuser"} D
      %br/
      %li
        %span CONE
        %button.view.btn-sm.btn.btn-danger{:name => "cones"} S
      %li
        %span CONE LENS
        %button.view.btn-sm.btn.btn-danger{:name => "cone_lens"} SL
      %li
        %span SIDE EMIT REFL
        %button.view.btn-sm.btn.btn-danger{:name => "side_emit_reflector"} SR
      %br/
      %li
        %span TIR LENS
        %button.view.btn-sm.btn.btn-danger{:name => "tir_lens"} TL
      %li
        %span TIR REF
        %button.view.btn-sm.btn.btn-danger{:name => "tir_reflector"} TR
      %br/
      %li
        %span REF
        %button.view.btn-sm.btn.btn-danger{:name => "reflector"} R
      %br/
      %li
        %span NO LENS
        %button.view.btn-sm.btn.btn-danger{:name => "no_lens"} NL
      %br/
      %li
        %span SPACER
        %button.view.btn-sm.btn.btn-warning{:name => "spacer"} S
      %li
        %span CIRCUIT
        %button.view.btn.btn-sm.btn-warning{:name => "circuit"} C
      %li
        %span BASE
        %button.view.btn.btn-sm.btn-warning{:name => "base"} B
      %br/
      %li
        %span CODE
        %button.view.btn-sm.btn.btn-warning{:name => "code"} C
.canvas-container
  %canvas#main-canvas
.popout.vert-right
  .dismiss.btn.btn-xs.btn-danger
    =glyph "remove"
  #code.editable.well


= render :partial => "modals"
= render :partial => "zoom_bar"

:css
  .popout{
    background: #333;
    position: absolute;
    top: calc(50% - 150px);
    left: calc(50% - 250px);
    width: 500px;
    height: 300px;
    z-index: 1000;
  }
  .dismiss{
    top: 2px;
    right: 2px;
    position: absolute;
    z-index: 100;
  }
  .editable{
    width: 100%;
    height: 100%;
    margin-bottom: 0px;
  }

  