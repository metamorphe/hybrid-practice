:javascript
  function ToolManager(){
  	this.tools = _.map($('.tool'), function(t){ 
  		return $(t).data('tool'); 
  	});
  	this.init();
  	var scope = this;
  
  
  	this.doms = $('.tool').click(function(){
  		var t = $(this).data('tool');
  		if(!_.isUndefined(scope.tools[t])){
  			var tool = scope.tools[t];
  			tool.enable();
  			$('#current-tool').html(tool.short_name);
  			$('#tool-instructions').html(tool.instructions);
  			$('#tool-fields').html(tool.fields);
  			if(paper.tool.bindings) paper.tool.bindings();
  
  		}
  		else
  			console.log(t, "has not been initialized");
  		
  	})
  	$('#current-tool').html("NONE")
  	$('#tool-instructions').html("")
  	$('#tool-fields').html("")
  
  }
  ToolManager.prototype = {
  	init: function(){
  		this.tools = _.chain(this.tools).map(function(tool){
  			try{
  				tool =  eval(tool + "()");
  				tool.enable = function(){
  					if(paper.tool) paper.tool.disable();
  					paper.tool = this;
  					console.log(this.name, "ENABLED");
  					
  				}
  				tool.disable = function(){
  					if(paper.tool.cleanup) paper.tool.cleanup();
  					paper.tool = null;
  				}
  				return tool;
  			} catch(e){
  				console.warn("Could not find", tool, "specification.");
  				return null;
  			}
  		}).compact()
  		.map(function(tool){return [tool.name, tool];})
  		.object()
  		.value();
  	}
  }
#tool-status-widget.widget.status
  %label.widget-title.label-normal{:name => "Tool Status"}
  .widget-body
    %span.status-label
      ACTIVE TOOL:
      %span#current-tool.status LINE-SELECT
    %br/
    %span#tool-instructions
    #tool-fields
    / <br class="clearfix">
:css
  #tool-instructions{
  	display: block;
  	margin-top: 2px;
  	margin-bottom: 2px;
  }
 
