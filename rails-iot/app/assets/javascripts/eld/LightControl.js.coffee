class window.ControlCenter
  constructor: (container) ->
    @container = container
    @state = true
    @history = [ null ]
    @idx = 0
    @style_before = {}
    @led_style_before = {}
    @led = null
    @init()
    return
  init: ->
    colors = _.range(0, 361, 10)
    _.each colors, (hue) ->
      c = new (paper.Color)('red')
      c.saturation = 0.8
      c.hue = hue
      hex = rgb2hex(c.toCanvasStyle())
      cDOM = $('<span class="mini-color-swatch"></span>').attr('name', hex)
      $('#mini-color-palette').append cDOM
      return
    scope = this
    _.each $('.mini-color-swatch'), (swatch) ->
      $(swatch).css 'background', $(swatch).attr('name')
      $(swatch).click ->
        clickedColor = $(swatch).attr('name')
        $('#led-color').val clickedColor
        _.each sm.currentSelectedLEDs(), (led) ->
          led.colorID = new (paper.Color)(clickedColor)
          led.fillColor = led.colorID
          # led.strokeColor = led.colorID;
          return
        paper.view.update()
        # vm.update();
        bb.update()
        if scope.getCurrentColor() != clickedColor
          $('.color-swatch').not(this).removeClass 'color-swatch-active'
          $(this).addClass 'color-swatch-active'
          scope.history.push clickedColor
          scope.idx++
        return
      return
    $('#led-color').on 'input', ->
      clickedColor = $('#led-color').val()
      _.each sm.currentSelectedLEDs(), (led) ->
        led.colorID = new (paper.Color)(clickedColor)
        led.fillColor = led.colorID
        # led.strokeColor = led.colorID;
        return
      paper.view.update()
      # vm.update();
      # bb.update();
      return
    $('#select-target').click ->
      paper.tool.holder.target_selection_mode = true
      # $(this).removeClass('btn-default');
      # $(this).addClass('btn-primary');
      return
    $('#clear-target').click ->
      if scope.led
        scope.led.forceTarget = null
      $('#target-view').attr 'data-target', ''
      return
    $('#target-view').hover (->
      targetID = parseInt($(this).attr('data-target'))
      if _.isNaN(targetID)
        return
      target = CanvasUtil.getIDs([ targetID ])[0]
      scope.style_before =
        strokeColor: target.strokeColor
        strokeWidth: target.strokeWidth
      scope.led_style_before =
        strokeColor: scope.led.strokeColor
        strokeWidth: scope.led.strokeWidth
      scope.led.set
        strokeWidth: 2
        strokeColor: '#00A8E1'
      target.set
        strokeColor: 'yellow'
        strokeWidth: 4
      paper.view.update()
      return
    ), ->
      targetID = parseInt($(this).attr('data-target'))
      if _.isNaN(targetID)
        return
      target = CanvasUtil.getIDs([ targetID ])[0]
      target.set scope.style_before
      scope.led.set scope.led_style_before
      paper.view.update()
      return
    return
  updatePanel: (led) ->
    led = CanvasUtil.getIDs([ led ])[0]
    @led = led
    @container.find('.badge').html(led.lid).attr 'cid', led.id
    if led.forceTarget
      @container.find('#target-view').attr 'data-target', led.forceTarget
    else
      @container.find('#target-view').attr 'data-target', led.target
    if led.colorID
      @container.find('#led-color').val rgb2hex(led.colorID.toCanvasStyle())
    if led.forceTarget
      @container.find('#select-target').addClass 'btn-success'
      @container.find('#select-target').removeClass 'btn-default'
    else
      @container.find('#select-target').addClass 'btn-default'
      @container.find('#select-target').removeClass 'btn-success'
    return
  getCurrentColor: ->
    color = @history[@idx]
    if _.isNull(color)
      color = '#000000'
    color
  getLastColor: ->
    lastIdx = if @idx - 1 > 0 then @idx - 1 else 0
    @history[lastIdx]
  show: (now) ->
    if @state
      return
    @state = true
    if now
      @container.show()
      return
    @container.toggle 'slide', { direction: 'left' }, 500
    return
  hide: (now) ->
    if !@state
      return
    @state = false
    if now
      @container.hide()
      return
    @container.toggle 'slide', { direction: 'left' }, 500
    return

# ---
# generated by js2coffee 2.2.0