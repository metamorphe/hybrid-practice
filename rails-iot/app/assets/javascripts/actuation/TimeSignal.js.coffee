time_signal_counter = 0

window.TimeSignal = (@op) ->
  @data = @op.data
  @id = time_signal_counter++
  @op.dom.parents('datasignal').data 'id', @id
  return

TimeSignal.prototype =
  command_list: (timePeriod) ->
    t_scale = timePeriod / @data.length
    t_elapsed = 0
    _.map @data, (datum) ->
      duration = 1 * t_scale
      t = t_elapsed
      t_elapsed += duration
      {
        t: t
        param: datum
        duration: duration
      }
  draw_axes: (op) ->
    offset = new (paper.Point)(0, -4)
    axes = [
      {
        from: paper.view.bounds.topLeft.subtract(offset)
        to: paper.view.bounds.topRight.subtract(offset)
      }
      {
        from: paper.view.bounds.bottomLeft.add(offset)
        to: paper.view.bounds.bottomRight.add(offset)
      }
    ]
    _.map axes, (axis) ->
      axis = _.extend(op, axis) 
      new (paper.Path.Line)(axis)
  to_visual: ->
    _.map @data, (datum, i) ->
      [
        [
          i
          datum
        ]
        [
          i + 1
          datum
        ]
      ]
  signal_fill: (op) ->
    visual = @to_visual()
    time_signal = _.flatten(visual, true);
    time_signal = _.flatten([[[0, 0]], time_signal, [[this.data.length, 0]]], true)
    
    op = _.extend(op,
      segments: time_signal
      closed: true)
    p = @makePath(op)
  signal: (op) ->
    visual = @to_visual()
    time_signal = _.flatten(visual, true)
    op = _.extend(op, segments: time_signal)
    p = @makePath(op)
  makePath: (op) ->
    p = new (paper.Path)(op)
    p.scaling.x = paper.view.bounds.width / p.bounds.width
    p.scaling.y = -(paper.view.bounds.height - 10) / p.bounds.height
    p.position = paper.view.center
    return
  express: (actuator, options) ->
    gamm = 1 / actuator.alpha
    gamma_corrected_signal = _.map(@data, (datum) ->
      datum ** actuator.alpha
    )
    time_signal = _.map(gamma_corrected_signal, (datum, i) ->[i, datum])
    p = new (paper.Path)(segments: time_signal)
    total_samples = @temporal_range * @sampling_rate
    signal = _.range(0, total_samples, 1)
    _.map signal, (sample) ->
      p.getPointAt(sample / total_samples).y

# ---
# generated by js2coffee 2.2.0